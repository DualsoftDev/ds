@page "/controllers/uploadmodel"
@using DsWebApp.Shared;
@using Dual.Common.Core
@using System.Reactive.Disposables
@using System.IO.Compression
@inject FilesManager FilesManager
@implements IDisposable


<h3>Upload File</h3>

<div class="dropArea @_dropClass">
    @if (_uploadingFile)
    {
        <p> Upload progressing... </p>
    }
    else
    {
        <p> Drag and drop ds zip file(*.dsz) here, or click to select. </p>
    }

    <InputFile disabled="@_uploadingFile"
               OnChange="onFileInputFileChange"
               @ondragenter="HandleDragEnter"
               @ondragleave="HandleDragLeave" />
</div>

<br/>
<div>@_uploadMessage</div>

@if (_uploadingFile)
{
    <progress style="height:50px;width:100%;" value="@_uploadedBytes" max="@_totalBytes"></progress>
}
<br />
<h3>Files</h3>

<table class="table">
    <thead>
        <tr>
            <th>Name</th>
            <th>Download</th>
            <th>Delete</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var url in _fileUrls)
        {
            <tr>
                <td><a href="files/@url" target="_blank">@url</a></td>
                <td><a href="api/files/@url/get" class="btn btn-primary">download</a></td>
                <td>
                    <button class="btn btn-outline-danger" disabled="@(!isDeletable(url))"
                    @onclick="
                        async e => {
                            await FilesManager.DeleteFileOnServer(url);
                            _fileUrls.Remove(url);
                            await InvokeAsync(StateHasChanged);
                        }
                    ">delete</button></td>
            </tr>
        }
    </tbody>
</table>
@code
{
    bool _uploadingFile = false;
    string _uploadMessage = "";
    long _uploadedBytes;
    long _totalBytes;
    List<string> _fileUrls = new List<string>();

    CompositeDisposable _disposables = new();
    ServerSettings _serverSettings;
    RuntimeModelDto _modelDto;
    protected override async Task OnInitializedAsync()
    {
        _serverSettings = await ClientGlobal.GetServerSettingsAsync(Http);
        _modelDto = await ClientGlobal.GetModelDtoAsync(Http);
        var action = new Action<RuntimeModelDto>(modelDto => { _modelDto = modelDto; StateHasChanged(); });
        IDisposable subscription = await ClientGlobal.MonitorModelChangeAsync(NavigationManager, action);
        _disposables.Add(subscription);

        await listFiles();
    }
    public void Dispose() => _disposables.Dispose();

    // support for drag/drop
    string _dropClass = string.Empty;
    void HandleDragEnter()
    {
        _dropClass = "dropAreaDrug";
    }
    void HandleDragLeave()
    {
        _dropClass = string.Empty;
    }

    bool isDeletable(string url)
    {
        if (!_modelDto.IsCpuRunning)
            return true;

        var runtime = getFileName(_serverSettings.RuntimeModelDsZipPath).ToLower();   // exportDS.Zip
        var file = getFileName(url).ToLower();
        return runtime != file;

        // System.IO.Path.GetFileName() 이 Browser 환경에서 제대로 동작하지 않음..
        string getFileName(string path)
        {
            int lastIndex = path.LastIndexOf('\\');
            return lastIndex == -1 ? path : path.Substring(lastIndex + 1);
        }
    }

    /// <summary>
    /// Occurs when a file is selected or dropped
    /// </summary>
    /// <param name="args"></param>
    /// <returns></returns>
    async Task onFileInputFileChange(InputFileChangeEventArgs args)
    {
        _uploadedBytes = 0;

        // Disable the file input field
        _uploadingFile = true;
        using var cleanup = Disposable.Create(() => _uploadingFile = false);
        await InvokeAsync(StateHasChanged);

        // calculate the chunks we have to send
        _totalBytes = args.File.Size;
        long percent = 0;
        long chunkSize = 400000;
        long numChunks = _totalBytes / chunkSize;
        long remainder = _totalBytes % chunkSize;

        string filePath = args.File.Name;

        // todo: upload 하려는 파일이 유효한 ds zip 파일인지 확인
        // - file format 이 zip 인지 확인
        // - 내부에 json 파일이 있는지 확인
        bool isValidDsZipFile()
        {
            if (!Path.GetExtension(filePath).ToLower().IsOneOf(".zds", ".zip", ".7z") 
                || args.File.ContentType != "application/x-zip-compressed")
                return false;

            /* Browser 환경에서는 stream 으로 args.File.OpenReadStream 로 읽을 수 밖에 없다.*/
            // try
            // {
            //     using var zip = ZipFile.OpenRead(filePath);
            //     // return zip.Entries.Any(entry => entry.FullName.ToLower().Contains("exportds.json"));
            //     return zip.Entries.Any(entry =>
            //     {
            //         var xxx = entry.FullName;

            //         return entry.FullName.ToLower().Contains("exportds.json");
            //     });
            // }
            // catch (Exception)
            // {
            //     return false;
            // }
            return true;
        }

        if (! isValidDsZipFile())
        {
            await JsDual.Alert($"Not a valid ds zip file: {filePath}");
            // HandleDragLeave();
            _uploadMessage = $"Failed to Upload {filePath}.";
            return;
        }

        bool isFirstChunk = true;
        bool isLastChunk = false;
        // Open the input and output file streams
        using var inStream = args.File.OpenReadStream(long.MaxValue);
        while (_uploadedBytes < _totalBytes)
        {
            var whatsLeft = _totalBytes - _uploadedBytes;
            if (whatsLeft <= chunkSize)
            {
                chunkSize = remainder;
                isLastChunk = true;
            }
            // Read the next chunk
            var bytes = new byte[chunkSize];
            var buffer = new Memory<byte>(bytes);
            var read = await inStream.ReadAsync(buffer);

            // create the fileChunk object
            var chunk = new FileChunk
                {
                    Data = bytes,
                    Path = filePath,
                    Offset = _uploadedBytes,
                    IsFirstChunk = isFirstChunk,
                    IsLastChunk = isLastChunk
                };

            // upload this chunk
            bool succeeded = await FilesManager.UploadFileChunk(chunk);
            if (!succeeded)
            {
                _uploadMessage = "Failed to upload.";
                await JsDual.Alert(_uploadMessage);
            }

            isFirstChunk = false; // no longer the first chunk

            // Update our progress data and UI
            _uploadedBytes += read;
            percent = _uploadedBytes * 100 / _totalBytes;
            // Report progress with a string
            _uploadMessage = $"Uploading {args.File.Name} {percent}%";
            await InvokeAsync(StateHasChanged);
        }

        _uploadMessage = "Upload Complete.";
        await listFiles();
    }

    async Task listFiles()
    {
        _fileUrls = await FilesManager.GetFileNames();
        await InvokeAsync(StateHasChanged);
    }
}
