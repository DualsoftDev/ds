@* CompHmiTagManager *@

@using Engine.Core
@using System.Reactive.Subjects

@implements IAsyncDisposable

@code {
    [Parameter] public EventCallback OnLoaded { get; set; }
    protected HubConnectionManager _hubConnectionManager;
    protected override async Task OnInitializedAsync()
    {
        HubConnection hubConnection = await NavigationManager.ToAbsoluteUri("/hub/hmi/tag").StartHubAsync();
        _hubConnectionManager = new HubConnectionManager(hubConnection, registerHubConnection);

        await base.OnInitializedAsync();
        Console.WriteLine($"Hub initialized on CompHmiTagManager.razor");
        await OnLoaded.InvokeAsync();

        IDisposable registerHubConnection(HubConnection hubConnection)
        {
            return hubConnection.On<TagWeb>(SK.S2CNTagWebChanged, (TagWeb change) =>
            {
                Console.WriteLine($"TagWeb change notification received with {change.Name}/{change.Kind}/{change.KindDescription}={change.Value}.");
                //ToastService.ShowInfo($"TagWeb change: {change.Name}/{change.Kind}={change.Value}.");
                ClientGlobal.TagChangedSubject.OnNext(change);
            });
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnectionManager != null)
            await _hubConnectionManager.DisposeAsync();
    }


    public async Task PostTagAsync(TagWeb tag, bool value = true)
    {
        tag.SetValue(value);
        var result = await Http.PostTagAsync(tag, AuthenticationStateProvider, NavigationManager);
        if (result.IsError)
            await JsDual.Alert($"Error while posting tag({tag.Name}) change: {result.Error}");
    }
}
