@* WgtEmbeddedTagLamp *@
@if (!_loading)
{
    <div class="@getClass()" id="@_guid"></div>
}

@code {
    string _guid;
    bool _loading = true;
    CompositeDisposable _disposables = new();
    [Parameter] public TagWeb TagLamp { get; set; }

    // public void SetLampState(bool isOn)
    // {
    //     IsOn = isOn;
    //     StateHasChanged();
    // }

    string getClass() {
        var on = (bool)TagLamp.Value ? "on" : "off";
        return $"embedded-lamp {on}";
    }
    protected override async Task OnInitializedAsync()
    {
        await Task.Yield();
        _guid = Guid.NewGuid().ToString();

        // evaluateEnabled();
        IDisposable subscription =
            ClientGlobal.TagChangedSubject.Subscribe(async tag =>
            {
                if (tag.IsEqual(TagLamp))
                {
                    await JsDual.SetAttribute(_guid, "class", getClass());

                    // evaluateEnabled();
                    // StateHasChanged();
                }
            });

        _disposables.Add(subscription);
        _loading = false;

        // void evaluateEnabled()
        // {
        //     var (a, m) = ((bool)TagAuto.Value, (bool)TagManual.Value);

        //     _autoStyle = (a ? ButtonRenderStyleMode.Outline : ButtonRenderStyleMode.Contained);
        //     _manualStyle = (m ? ButtonRenderStyleMode.Outline : ButtonRenderStyleMode.Contained);

        //     _autoText = (a ? "✓ " : "") + "Auto";
        //     _manualText = (m ? "✓ " : "") + "Manual";
        // }
    }


}



<style>
    .embedded-lamp {
        width: 10px;
        height: 20px;
        border-radius: 10%;
        background-color: red;  /* erroneous */
        margin-right: 10px;
        display: inline-block;
    }
        .embedded-lamp.off { background-color: darkslategray; }
        .embedded-lamp.on { background-color: darkorange; }
</style>