@* LampFlow *@

@implements IDisposable


@if (!_loading)
{
    <div style="display: flex; align-items: center;">
        <div class="@getClass()" id="@_guid"></div>
        <div id="@_guid">@_text</div>
    </div>
}


@code {
    [Parameter] public HMIFlow Flow { get; set; }
    [EditorRequired] [CascadingParameter(Name = "TagManager")] public CompHmiTagManager TagManager { get; set; }

    string _guid;
    string _text;
    bool _loading = true;
    IDisposable _subscription;
    TagWeb _drive, _error, _emStop, _test, _ready, _idle, _origin;
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if (TagManager == null)
            throw new Exception("TagManager is null on LampFlow.");
        _subscription =
            ClientGlobal.TagChangedSubject.Subscribe(onTagWebChanged);

        _guid = Guid.NewGuid().ToString();

        _drive = Flow.DrivePushLampMode.Item2;
        _emStop = Flow.EmergencyPushLampMode.Item2;
        _test = Flow.TestPushLampMode.Item2;
        _ready = Flow.ReadyPushLampMode.Item2;
        _idle = Flow.IdleLampMode;
        _origin = Flow.OriginLampMode;
        _error = Flow.ErrorLampMode;
        
        _text = getText();
        _loading = false;
    }

    string getText()
    {
        if ((bool)_emStop.Value)
            return "EMStop";
        else if ((bool)_error.Value)
            return "Error";
        else if ((bool)_drive.Value)
            return "Drive";
        else if ((bool)_ready.Value)
            return "Ready";
        else if ((bool)_idle.Value)
            return "Idle";
        else if ((bool)_test.Value)
            return "Test";
        else
            return "INTERNAL ERROR!";
    }
    string getClass()
    {
        var xxx = getText();
        return $"embedded-lamp-flow {xxx}";
    }

    public void Dispose()
    {
        _subscription.Dispose();
    }
    void onTagWebChanged(TagWeb tag)
    {
        TagWeb[] lampTags = [_drive, _error, _emStop, _test, _ready, _idle];

        if (lampTags.Any(t => t.IsEqual(tag)))
        {
            _text = getText();
            StateHasChanged();
        }
    }
}

<style>
    .embedded-lamp-flow {
        width: 10px;
        height: 20px;
        border-radius: 10%;
        background-color: red;  /* erroneous */
        margin-right: 10px;
        display: inline-block;
    }
        .embedded-lamp-flow.Ready { background-color: green; }
        .embedded-lamp-flow.Stop { background-color: orangered; }
        .embedded-lamp-flow.EMStop { background-color: red; }
        .embedded-lamp-flow.Drive { background-color: darkorange; }
        .embedded-lamp-flow.Idle { background-color: slateblue; }
        .embedded-lamp-flow.Test { background-color: cornflowerblue; }
</style>