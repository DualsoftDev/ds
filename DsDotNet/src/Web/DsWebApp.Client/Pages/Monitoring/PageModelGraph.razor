@* https://github.com/cytoscape/cytoscape.js/blob/unstable/documentation/demos/compound-nodes/index.html *@

@* 
참고 파일
- js/cyDsGraph.js
- js/pages/PageModelGraph_razor.js
 *@

@page "/dashboards/graph"
@implements IDisposable
@using static Engine.Info.LoggerDB;
@using static Engine.Info.DBLoggerORM;
@using Engine.Info

<h3>Model Graph</h3>

<button id="center">Center</button>
<button id="hide">Hide selection</button>
<button id="show">Show</button>
<DxButton Text="Start MONITOR" Click="@(async () => await startMonitorAsync())" Visible="@(_graphLoaded && _hubSubscription == null)" />
<DxButton Text="Stop MONITOR" Click="@(async () => await stopMonitorAsync())" Visible="@(_graphLoaded && _hubSubscription != null)" />
<DxButton Text="Clear MONITOR status" Click="@(async () => await resetStatusAsync())" Visible="@(_graphLoaded && _hubSubscription == null)" />    

@if (! _graphLoaded)
{
    <LoadingSpinner Text="Loading model.." />
}


<div id="cy"></div>

@code {
    bool _graphLoaded;
    HubConnection _hubConnection;
    IDisposable _hubSubscription;
    ORMDBSkeleton _logDb;
    Dictionary<string, CyVertex> _fqdnNodeDic;
    DotNetObjectReference<PageModelGraph> _dotNetObjRef;
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _dotNetObjRef = DotNetObjectReference.Create(this);
        _hubConnection = await NavigationManager.ToAbsoluteUri("/hub/db").StartHubAsync();
        var result = await Http.GetRestResultAsync<string>($"/api/info/logdb-base");
        result.Iter(
            logDbBaseJson =>
            {
                var logDbBase = ORMDBSkeletonDTO.Deserialize(logDbBaseJson);
                _logDb = new ORMDBSkeleton(logDbBase);
                Console.WriteLine($"LogDB: {_logDb.TagKinds.Count}");
            },
            err => Console.Error.WriteLine($"Failed to get logdb-base: {err}")
        );


        // https://stackoverflow.com/questions/75845434/why-the-following-simple-cytoscape-dagre-html-is-not-working
        var jss = new[]
        {
            "js/external/cytoscape/dagre.js",
            "js/external/cytoscape/cytoscape.min.js",
            "js/external/cytoscape/cytoscape-dagre.js",
        };
        foreach(var js in jss)
            await JsDual.EvalExternalScript(js);

        /*
        * cytoscape.js 제작용 data 를 window.cyData 에 저장하고 이를 처리하기 위한 javascript 실행.  (cyDsGraph.js)
        */
        // var data = await Http.GetRestResultAsync<string>($"/api/model/graph?fqdn=HelloDS.STN1.Work1");
        // var data = await Http.GetRestResultAsync<string>($"/api/model/graph?fqdn=SIDE6.S200_CARTYPE_MOVE");
        var data = await Http.GetRestResultAsync<string[]>($"/api/model/graph");
        await data.IterAsync(
            async jsons =>
            {
                var (graphJson, nodesJson) = (jsons[0], jsons[1]);
                Console.WriteLine($"--------------- Cytoscape data:\r\n{graphJson}");
                await JsDual.EvalOnGlobalModule($"window.cyData = {graphJson};");
                await JsDual.EvalExternalScript("js/cyDsGraph.js");
                await JsDual.EvalExternalScript("js/pages/PageModelGraph_razor.js");
                await JsDual.EvalOnGlobalModule("cy.nodes().addClass('NM')");       // default to Non-Monitoring mode

                await JsRuntime.InvokeVoidAsync("setDotnetObjRef", _dotNetObjRef);

                var nodes = NewtonsoftJson.DeserializeObject<CyVertex[]>(nodesJson);
                foreach (var n in nodes)
                    Console.WriteLine($"{n.id} = {n.type}");

                _fqdnNodeDic = nodes.ToDictionary(node => node.fqdn);
                Console.WriteLine($"Got total {nodes.Length} vertices");
            },
            async err => await JsDual.Alert($"Failed to get data: {err}")
        );
    }

    IDisposable listenHub()
    {
        return _hubConnection.On<string>(SK.S2CNLogChanged,
            async logJson =>
            {
                try
                {
                    var log = ORMLog.Deserialize(logJson);
                    var vwLog = _logDb.ToView(log);

                    var fqdn = vwLog.Fqdn;

                    if (_fqdnNodeDic != null && _fqdnNodeDic.TryGetValue(fqdn, out var node))
                        await applyLogAsync(vwLog);
                    else
                        throw new Exception($"Failed to find fqdn: {fqdn} for log id={vwLog.Id}");

                }
                catch (Exception e)
                {
                    await JsDual.Alert(e.Message);
                    throw;
                }
            });
    }

    /// <summary>
    /// 최초 상태를 받기전의 알수 없는 상태로 marking
    /// </summary>
    async Task markStatusUnknownAsync() =>
        await JsDual.EvalOnGlobalModule("cy.nodes().removeClass('R G F H NM').addClass('U M')");

    /// <summary>
    /// Non-Monitoring 상태로 초기화
    /// </summary>
    async Task resetStatusAsync() =>
        await JsDual.EvalOnGlobalModule("cy.nodes().removeClass('R G F H U M').addClass('NM')");

    async Task stopMonitorAsync()
    {
        _hubSubscription?.Dispose();
        _hubSubscription = null;
    }

    async Task startMonitorAsync()
    {
        await markStatusUnknownAsync();
        _hubSubscription?.Dispose();
        _hubSubscription = listenHub();
    }

    /// <summary>
    /// Log 변경을 UI 에 적용한다.
    /// </summary>
    async Task applyLogAsync(ORMVwLog vwLog)
    {
        var status = vwLog.TagKindName switch
        {
            "VertexTag.ready" => "R",
            "VertexTag.going" => "G",
            "VertexTag.finish" => "F",
            "VertexTag.homing" => "H",
            _ => ""
        };

        // fqdn 의 value 에 따라 해당 node 의 상태를 변경
        var id = _fqdnNodeDic[vwLog.Fqdn].id;
        Console.WriteLine($"cy.$('#{id}').classes() : added {status}  (Log: {vwLog.Id}={vwLog.Fqdn})");
        var val = vwLog.Value.ToString();
        var addOrRemove =  val == "1" ? "addClass" : "removeClass";
        await JsDual.EvalOnGlobalModule($@"cy.$('#{id}').removeClass('U').{addOrRemove}('{status}')");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Console.WriteLine("OnAfterRenderAsync.");
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            // cytoscape 와의 interop 시, firstRender 후 바로 적용이 불가능.  _graphLoaded 를 통해 조건부 적용
        }
        else if (! _graphLoaded)
        {
            Console.WriteLine("Fitting cytoscape graph after loading.");

            // dirty hack!
            await Task.Delay(2000);
            await JsDual.EvalOnGlobalModule(@"fit();");
            _graphLoaded = true;
            StateHasChanged();
        }
    }

    [JSInvokable]
    public async Task echo(string message)
    {
        await Task.Yield();
        Console.WriteLine($"------------ Got {message} from JS.");
    }
    [JSInvokable]
    public async Task HandleNode(string eventName, string fqdn)
    {
        await Task.Yield();
        Console.WriteLine($"------------ Got Node Event {eventName} on {fqdn} from JS.");
    }

    public void Dispose()
    {
        _dotNetObjRef?.Dispose();
    }
}

<style>
    body {
        font: 14px helvetica neue, helvetica, arial, sans-serif;
    }

    #cy {
        height: 90%;
        width: 90%;
        position: relative;
        left: 0;
        top: 0;
    }
 </style>
 
