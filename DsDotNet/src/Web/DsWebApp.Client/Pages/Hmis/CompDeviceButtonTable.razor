@using static Engine.Core.TagWebModule

@using TagWeb = Engine.Core.TagWebModule.TagWeb

@* HMIPush * HMILamp  //input, output *@
@using HMIDevice = Tuple<Engine.Core.TagWebModule.TagWeb, Engine.Core.TagWebModule.TagWeb>
@inherits CompHmiTagContainer

<h4>@TableName</h4>

<DxGrid Data="_items">
    <Columns>
        <DxGridDataColumn FieldName="PushButtonName" />
        <DxGridDataColumn FieldName="PushButtonValue" />
        <DxGridDataColumn FieldName="PushButtonKind" />
        <DxGridDataColumn FieldName="LampName" />
        <DxGridDataColumn FieldName="LampValue" />
        <DxGridDataColumn FieldName="LampKind" />
    </Columns>
</DxGrid>

@code {
    [Parameter] public HMIDevice[] HMIDevices { get; set; }
    [Parameter] public string TableName { get; set; }

    class HmiDeviceRow
    {
        public TagWebORM pb;  // pushbutton
        public TagWebORM lp;  // lamp
        public string PushButtonName => pb.Name;
        public object PushButtonValue => pb.Value;
        public int PushButtonKind => pb.Kind;

        public string LampName => lp.Name;
        public object LampValue => lp.Value;
        public int LampKind => lp.Kind;

        public HmiDeviceRow(HMIDevice hmiDevice)
        {
            var (p, l) = hmiDevice;
            pb = new TagWebORM(p);
            lp = new TagWebORM(l);
        }
    }
    HmiDeviceRow[] _items;

    protected override async Task OnInitializedAsync()
    {
        await Task.Yield();
        _items = HMIDevices.Select(hb => new HmiDeviceRow(hb)).ToArray();

        TagWebORM[] tagWebs = _items.SelectMany(x => new[] { x.pb, x.lp }).ToArray();
        await InitializeMapAsync(tagWebs);
    }
    public override void UpdateStateHasChanged() => StateHasChanged();

}
