@using Engine.Core
@using System.Reactive.Subjects


@if (_loading)
{
    <p><em>Loading...</em></p>
}
else
{
    <DxGrid Data="Flows" @ref="MyGrid">
        <Columns>
            @* <DxGridDataColumn FieldName="Name" Caption="Flow"></DxGridDataColumn> *@
            <DxGridCommandColumn Caption="Flow">
                <HeaderTemplate>Flow</HeaderTemplate>
                <CellDisplayTemplate>
                    <DxButton Click="() => onFlow(context.DataItem)"
                              Text="@(((HMIFlow)context.DataItem).Name)"
                              RenderStyle="ButtonRenderStyle.Info" />
                </CellDisplayTemplate>
            </DxGridCommandColumn>
            <DxGridCommandColumn Caption="Auto/Manual">
                <HeaderTemplate>
                    Auto/Manual
                </HeaderTemplate>
                <CellDisplayTemplate>
                    <CompHmiWidgetAutoManualSelectorPushButton
                        TagAuto="(((HMIFlow)context.DataItem).GetAuto())"
                        TagManual="(((HMIFlow)context.DataItem).GetManual())"
                        TagChangedObservable="@_tagWebChanged"
                        FlowName="@(((HMIFlow)context.DataItem).Name)"
                        />

                    @*                     @{
                <DxButton Click="() => onAuto(context.DataItem)" Text="Auto" IconCssClass="" />
                // <DxButton Click="() => onManual(context.DataItem)" Text="Manual" IconCssClass="oi oi-check" />
                <CompHmiWidgetPushButton Tag="(((HMIFlow)context.DataItem).GetManual())" Click="() => onManual(context.DataItem)" Text="Manual" />
                }
                *@

                </CellDisplayTemplate>
            </DxGridCommandColumn>
            <CompHmiButtonColumn Caption="Drive" OnClick="@onDrive" />
            <CompHmiButtonColumn Caption="Stop" OnClick="@onStop" />
            <CompHmiButtonColumn Caption="Clear" OnClick="@onClear" />
            <CompHmiButtonColumn Caption="Em. Stop" OnClick="@onEmStop" ForceWidth=100 />
            <CompHmiButtonColumn Caption="Test" OnClick="@onTest" />
            <CompHmiButtonColumn Caption="Home" OnClick="@onHome" />
            <CompHmiButtonColumn Caption="Ready" OnClick="@onReady" />

        </Columns>
    </DxGrid>
}

@code {
    IGrid MyGrid { get; set; }
    bool _loading { get; set; } = true;
    [Parameter] public HMIFlow[] Flows { get; set; }


    HubConnectionManager _hubConnectionManager;
    Subject<TagWeb> _tagWebChanged = new Subject<TagWeb>();

    protected override async Task OnInitializedAsync()
    {
        HubConnection hubConnection = await NavigationManager.ToAbsoluteUri("/hub/hmitag").StartHubAsync();
        _hubConnectionManager = new HubConnectionManager(hubConnection, registerHubConnection);

        Console.WriteLine($"Hub initialized on PageHmiTagTest.razor");
        await base.OnInitializedAsync();

        IDisposable registerHubConnection(HubConnection hubConnection)
        {
            return hubConnection.On<TagWeb>(SK.S2CNTagWebChanged, (TagWeb change) =>
            {
                Console.WriteLine($"TagWeb change notification received with {change.Name}/{change.Kind}={change.Value}.");
                _tagWebChanged.OnNext(change);
            });
        }

        _loading = false;
    }

    public async ValueTask DisposeAsync()
    {
        await _hubConnectionManager.DisposeAsync();
        Console.WriteLine("CompHmiFlowTable.razor disposed!");
    }


    async Task onFlow(object dataItem)
    {
        var flow = (HMIFlow)dataItem;
        var name = flow.Name;
        await JsDual.Alert($"flow {name}");
        NavigationManager.NavigateTo($"hmis/flow/{name}");
        // todo : switch to flow view
    }

    async Task postTag(TagWeb tag, bool value = true)
    {
        tag.SetValue(value);
        var anyError = await Http.PostTagAsync(tag, AuthenticationStateProvider, NavigationManager);
        if (anyError.NonNullAny())
            await JsDual.Alert($"Error while posting tag({tag.Name}) change: {anyError}");
    }

    async Task onAuto(object dataItem)
    {
        var flow = (HMIFlow)dataItem;
        await postTag(flow.GetAuto(), true);
    }

    async Task onManual(object dataItem)
    {
        var flow = (HMIFlow)dataItem;
        await postTag(flow.GetManual(), true);
    }


    async Task onDrive(object dataItem) => await postTag(((HMIFlow)dataItem).DrivePush);
    async Task onStop(object dataItem) => await postTag(((HMIFlow)dataItem).StopPush);
    async Task onClear(object dataItem) => await postTag(((HMIFlow)dataItem).ClearPush);
    async Task onEmStop(object dataItem) => await postTag(((HMIFlow)dataItem).EmergencyPush);
    async Task onTest(object dataItem) => await postTag(((HMIFlow)dataItem).TestPush);
    async Task onHome(object dataItem) => await postTag(((HMIFlow)dataItem).HomePush);
    async Task onReady(object dataItem) => await postTag(((HMIFlow)dataItem).ReadyPush);
}



