@using Dual.Common.Core
@using Dual.Web.Blazor.Client.Components.Auth
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ClientGlobal ClientGlobal

<CompSessionLogin/>

<nav class="navbar header-navbar p-0">
    <button class="navbar-toggler bg-primary d-block" @onclick="OnToggleClick">
        <span class="navbar-toggler-icon"></span>
    </button>
    <div class="ms-3 fw-bold title pe-4">듀얼소프트 웹</div>

    <div class="justify-content-end">
@*
        <a href="https://docs.microsoft.com/aspnet/" target="_blank">About</a>
        <AuthorizeView>
        <Authorized>
                <a @onclick="Logout" href="javascript:void(0)">Logout</a> &nbsp;(@context.User.Identity.Name)
            </Authorized>
            <NotAuthorized>
                <a href="/toplevel/login">Login</a>
            </NotAuthorized>
        </AuthorizeView>
 *@

        @if (ClientGlobal.UserSession == null)
        {
            <a href="/toplevel/login">Login</a>
        }
        else
        {
            var name = ClientGlobal?.AuthenticationState?.User?.Identity?.Name;
            if (name.NonNullAny())
                name = $"({name})";
            <a @onclick="Logout" href="javascript:void(0)">Logout @name</a>
        }

    </div>

</nav>

@code {
    [Parameter] public bool ToggleOn { get; set; }
    [Parameter] public EventCallback<bool> ToggleOnChanged { get; set; }

    async Task OnToggleClick() => await Toggle();

    async Task Toggle(bool? value = null) {
        var newValue = value ?? !ToggleOn;
        if(ToggleOn != newValue) {
            ToggleOn = newValue;
            await ToggleOnChanged.InvokeAsync(ToggleOn);
        }
    }

    private async Task Logout()
    {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthenticationStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(null);
        NavigationManager.NavigateTo("/", true);
    }
    protected override async Task OnInitializedAsync()
    {
        AuthenticationStateProvider.AuthenticationStateChanged += async authStateTask =>
            {
                Console.Write("AuthenticationStateChanged: ");
                AuthenticationState authState = await authStateTask;
                // if (authState.User.Identities.Any(identity => identity.IsAuthenticated))
                if (authState.User.Identity.IsAuthenticated)
                    Console.WriteLine($"인증 OK");
                else
                    Console.WriteLine($"인증 안됨");


                StateHasChanged();
                // var user = authState.User;
                // if (user.Identity.IsAuthenticated)
                // {
                //     var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthenticationStateProvider;
                //     await customAuthStateProvider.UpdateAuthenticationState(user);
                // }
            };
    }

}