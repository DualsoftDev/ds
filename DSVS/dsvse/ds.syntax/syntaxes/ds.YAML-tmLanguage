---

name: ds
comment: DS language syntax.  Do *NOT* modify auto-generated JSON file.
scopeName: source.ds
fileTypes: [ds]
foldingStartMarker: '\{\s*$'
foldingStopMarker: '^\s*\}'

# foldingStartMarker: '^\s*[{\[\`](?!.*[}\]\`],?\s*$)|[{\[\`]\s*$'
# foldingStopMarker: '^\s*[}\]\`]'

# 원본 참조
# https://github.com/inkle/ink-tmlanguage/blob/master/grammars/Ink.YAML-tmLanguage



patterns:
#- include: '#number'
#- include: '#causals'
- include: '#systems'
- include: '#layouts'
- include: '#addresses'
- include: '#comments'
- include: '#parents'
#- include: '#tasks'
#- include: '#flows'
#- include: '#macros'


repository:
  comments: # Inline (//) and block (/* */) comments. Comments can happen anywhere.
    patterns:
    - name: comment.block.ds
      begin: /\*
      beginCaptures:
        '0': { name: punctuation.definition.comment.ds }
      end: \*/
      endCaptures:
        '0': { name: punctuation.definition.comment.ds }
    - begin: (^\s+)?(?=//)
      beginCaptures:
        '1': { name: punctuation.whitespace.comment.leading.ds }
      end: (?=$)
      patterns:
      - name: comment.block.documentation.ds
        begin: (?<!/)///(?!/)
        beginCaptures:
          '0': { name: punctuation.definition.comment.ds }
        end: (?=$)
        
        
      - name: comment.line.double-slash.ds
        begin: (?<!/)//(?:(?!/)|(?=//))
        beginCaptures:
          '0': { name: punctuation.definition.comment.ds }
        end: (?=$)

  systems:
    patterns:
      - comment: system-multi-line
        name: system.multi.ds
        begin: \[\s*(sys)\s*\]\s*([가-힣a-zA-Z_][가-힣a-zA-Z_0-9]*)\s*=\s*(\{)(?=[^\}]*$)
        beginCaptures:
          '1': {name: entity.name.type.other.ds}
          '2': {name: entity.name.function.control.ds}
        end: (^\s*\})
        endCaptures:
          '1': {name: punctuation.brace.end.ds}
        patterns:  
        - include: '#tasks'
        - include: '#flows'           
        #- include: '#comments'
        - include: '#accessDefs'
        - include: '#macros'
        - include: '#causals'
        - include: '#imports'
           
      - comment: system-single-line
        name: system.single.ds
        begin: \[\s*(sys)\s*\]\s*([가-힣a-zA-Z_][가-힣a-zA-Z_0-9]*)\s*=\s*\{
        beginCaptures:
          '1': {name: entity.name.type.other.ds}
          '2': {name: entity.name.function.control.ds}
        end: \}
        patterns:          
        - name: punctuation.separator.array.ds
          match: ";"
        - include: '#segment'
        - name: invalid.illegal.expected-array-separator.json
          match: '[^\s\}]'

  tasks:
    patterns:
      - comment: multi-line tasks
        name: tasks.multi.ds
        begin: \[\s*(task)\s*\]\s*([가-힣a-zA-Z_][가-힣a-zA-Z_0-9]*)\s*=\s*(\{)(?=[^\}]*$)
        beginCaptures:
          '1': {name: entity.name.type.other.ds}
          '2': {name: entity.name.function.control.ds}
        end: (^\s*\})
        endCaptures:
          '2': {name: punctuation.brace.tasks.end.ds}
        patterns:
        #- include: '#segment'
        - include: '#segments'         
        #- include: '#comments'
        - include: '#accessDefs'
        - include: '#callSegmentDefs'
        - include: '#macros'    
        #- include: '#causals'
        - include: '#imports'

        
      - comment: single-line tasks
        name: tasks.single.ds
        begin: \[\s*(task)\s*\]\s*([가-힣a-zA-Z_][가-힣a-zA-Z_0-9]*)\s*=\s*\{
        beginCaptures:
          '1': {name: entity.name.type.other.ds}
          '2': {name: entity.name.function.control.ds}
        end: \}
        patterns:          
        - name: punctuation.separator.array.ds
          match: ";"
        - include: '#segment'
        - name: invalid.illegal.expected-array-separator.json
          match: '[^\s\}]'

  flows:
    patterns:
      - comment: multi-line flows
        name: flows.multi.ds
        begin: \[\s*(flow)\s*\]\s*([가-힣a-zA-Z_][가-힣a-zA-Z_0-9]*)\s*=\s*(\{)(?=[^\}]*$)
        beginCaptures:
          '1': {name: entity.name.type.other.ds}
          '2': {name: entity.name.function.control.ds}
        end: (?<=\s*\})
        endCaptures:
          '1': {name: punctuation.flows.brace.end.ds}
        patterns:
        #- include: '#segment'
         
        - include: '#segments'
         
        #- include: '#comments'
        - include: '#accessDefs'
        - include: '#macros'
        - include: '#causals'
        - include: '#imports'
        - include: '#parents'

      - comment: single-line flows
        name: flows.single.ds
        begin: \[\s*(flow)\s*\]\s*([가-힣a-zA-Z_][가-힣a-zA-Z_0-9]*)\s*=\s*\{
        beginCaptures:
          '1': {name: entity.name.type.other.ds}
          '2': {name: entity.name.function.control.ds}
        end: (\})
        patterns:          
        - name: punctuation.separator.array.ds
          match: ";"
        - include: '#segment'
        - include: '#causals'
        - name: invalid.illegal.flows.expected-array-separator.json
          match: '[^\s\}]'

  parents:
    patterns:
    - name: meta.structure.parents.ds
      begin: ([가-힣a-zA-Z_][가-힣a-zA-Z_0-9]*)\s*=\s*(\{)
      beginCaptures:
        '1': {name: variable.other.function.type.parents.ds}
      end: (^\s*\})
      patterns:
      - include: '#segment'
      #- include: '#segments'
      #- include: '#accessDefs'
      #- include: '#macros'
      - include: '#causals'
      #- include: '#imports'



  accessDefs:
      patterns:
      - name: access.ds
        begin: \[\s*(accsre|accsr|accre|accse|accs|accr|acce)\s*\]\s*=\s*(\{)
        beginCaptures:
          '1': {name: keyword.other.accessSRE.ds}      
        end: (^\s*\})
        patterns:
          - name: punctuation.brace.separator.ds
            match: ;
          - include: '#segment'
          #- include: '#comments'
      #- include: '#comments'
      - include: $self

  #  macros:
  #    patterns:
  #    - name: macro2.ds
  #      begin: (\@|\#)\s*([가-힣a-zA-Z][가-힣a-zA-Z_0-9]*)*\s*\(\s*[가-힣a-zA-Z_0-9]*\s*\)
  #      patterns:
  #        - include: '#callSegmentDefs'
  #        - include: '#causals'
  #        - include: '#comments'

  callSegmentDefs:
    patterns:
    - name: call.segment.ds
      begin: ([가-힣a-zA-Z_][가-힣a-zA-Z_0-9]*)\s*=\s*(\{)(?=[^\}]*$)
      beginCaptures:
        '1': {name: keyword.control.callSegment.ds}
      end: (^\s*\})
      patterns:
        - name: punctuation.comma.ds
          match: '\,'
        - name: keyword.other.callSegment.ds
          match: '\~'
        - include: '#segment'
        - name: invalid.illegal.expected-array-separator.json
          match: '[;<>\|]'

  causals:
    patterns:
      - name: punctuation.andmark.ds
        match: '\,'
      - name: punctuation.ormark.ds
        match: '\?'
      - include: '#segment'
      - name: invalid.illegal.expected-array-separator.json
        match: '(<\|>)'   
      - name: keyword.other.causal.ds
        match: '(<\|\|>)|(<\|)|(\|>)|<|>'

  imports:
    patterns:
    - name: import.ds
      begin: \s*(!#import)\s*([가-힣a-zA-Z_][가-힣a-zA-Z_0-9]*) (as) ([가-힣a-zA-Z_][가-힣a-zA-Z_0-9]*) (from) (\"[^\"]+\")
      beginCaptures:
        '1': {name: keyword.other.import.ds}
        '2': {name: variable.other}
        '3': {name: keyword.other.import.ds}
        '4': {name: variable.other}
        '5': {name: keyword.other.import.ds}
        '6': {name: string.quoted.double.ds}
      end: ';'

    - name: import.ds
      begin: \s*(!#import)\s*\{
      beginCaptures:
        '1': {name: keyword.other.import.ds}
      end: \}\s*(from)\s*(\"[^\"]+\")\s*;
      endCaptures:
        '1': {name: keyword.other.import.ds}
        '2': {name: string.quoted.double.ds}
      patterns:
      - name: keyword.other.as.ds
        match: 'as'
      - name: punctuation.comma.ds
        match: '\,'
      - include: '#segment'
      #- include: '#comments'


  macros:
    patterns:
    - name: access.ds
      begin: (#|@)\s*([가-힣a-zA-Z_][가-힣a-zA-Z_0-9]*)*\s*(\()
      beginCaptures:
        '1': {name: keyword.other.accessMacro.ds}      
      end: (\))
      patterns:
        - name: punctuation.brace.separator.ds
          match: ;
        - name: 'variable.other.words.ds'
          match: '\b[가-힣a-zA-Z_0-9]*\b'
        - include: '#segment'
        #- include: '#comments'
    #- include: '#comments'
    - include: $self

  segment:
    patterns:
    - name: 'variable.other.segment.withdot.ds'
      match: '\b[가-힣a-zA-Z_][가-힣a-zA-Z_0-9]*\.[가-힣a-zA-Z_][\.가-힣a-zA-Z_0-9]*\b'
    - name: 'variable.other.segment.ds'
      match: '\b[가-힣a-zA-Z_][가-힣a-zA-Z_0-9]*\b'
    - include: '#comments'
    - name: invalid.illegal.segment.expected-array-separator.json
      match: '[^\s\{\};=<>|&~\(\)\{1,1}]'


  segments:
    - name: meta.structure.array.ds
      begin: \{
      beginCaptures:
        '1': { name: 'punctuation.definition.macro.start.ds' }
      end: \}
      endCaptures:
        '1': { name: 'punctuation.definition.macro.end.ds' } 
      patterns:
      #- include: '#comments'
      - include: '#segment'
      - name: punctuation.comma.ds
        match: '\,'
      - include: '#macros'
      - name: punctuation.separator.array.ds
        match: ";"
      - name: invalid.illegal.segments.expected-array-separator.json
        match: '[^\s\]]'

  layouts:
    patterns:
    - name: layouts.ds
      begin: \[\s*(layouts)\s*\]\s*=\s*(\{)(?=[^\}]*$)
      beginCaptures:
        '1': {name: keyword.control.layouts.ds}
      end: (^\s*\})
      patterns:
        - include: '#number'
        - name: punctuation.comma.ds
          match: '\,'
        - name: punctuation.equal.ds
          match: '='
        - include: '#segment'
        - name: invalid.illegal.expected-array-separator.json
          match: '[;<>\|]'


  addresses:
    patterns:
    - name: addresses.ds
      begin: \[\s*(addresses|address)\s*\]\s*=\s*(\{)(?=[^\}]*$)
      beginCaptures:
        '1': {name: keyword.control.addresses.ds}
      end: (^\s*\})
      patterns:
        - include: '#number'
        - name: punctuation.comma.ds
          match: '\,'
        - name: punctuation.equal.ds
          match: '='
        - include: '#segment'
        - name: invalid.illegal.expected-array-separator.json
          match: '[;<>\|]'

  number:
    patterns:
    - name: constant.numeric.json
      match: '\b([0-9][0-9]*)\b'


...
