/// Basic operations on arrays.
[<CompilationRepresentation(enum<CompilationRepresentationFlags> (4))>]
[<RequireQualifiedAccess>]
module Microsoft.FSharp.Collections.Array

/// Builds a new array that contains the elements of the first array followed by the elements of the second array.
/// array1: The first input array.
/// array2: The second input array.
val append : array1:'T [] -> array2:'T [] -> 'T []
/// Returns the average of the elements in the array.
/// array: The input array.
val inline average : array: ^T [] ->  ^T when ^T : (static member ( + ) :  ^T *  ^T ->  ^T) and ^T : (static member DivideByInt :  ^T * int ->  ^T) and ^T : (static member Zero :  ^T)
/// Returns the average of the elements generated by applying the function to each element of the array.
/// projection: The function to transform the array elements before averaging.
/// array: The input array.
val inline averageBy : projection:('T ->  ^U) -> array:'T [] ->  ^U when ^U : (static member ( + ) :  ^U *  ^U ->  ^U) and ^U : (static member DivideByInt :  ^U * int ->  ^U) and ^U : (static member Zero :  ^U)
/// Reads a range of elements from the first array and write them into the second.
/// source: The source array.
/// sourceIndex: The starting index of the source array.
/// target: The target array.
/// targetIndex: The starting index of the target array.
/// count: The number of elements to copy.
val blit : source:'T [] -> sourceIndex:int -> target:'T [] -> targetIndex:int -> count:int -> unit
/// For each element of the array, applies the given function. Concatenates all the results and return the combined array.
/// mapping: The function to create sub-arrays from the input array elements.
/// array: The input array.
val collect : mapping:('T -> 'U []) -> array:'T [] -> 'U []
/// Compares two arrays using the given comparison function, element by element.  Returns the first non-zero result from the comparison function. If the end of an array is reached it returns a -1 if the first array is shorter and a 1 if the second array is shorter.
/// comparer: A function that takes an element from each array and returns an int.  If it evaluates to a non-zero value iteration is stopped and that value is returned.
/// array1: The first input array.
/// array2: The second input array.
val inline compareWith : comparer:('T -> 'T -> int) -> array1:'T [] -> array2:'T [] -> int
/// Builds a new array that contains the elements of each of the given sequence of arrays.
/// arrays: The input sequence of arrays.
val concat : arrays:seq<'T []> -> 'T []
/// Tests if the array contains the specified element.
/// value: The value to locate in the input array.
/// array: The input array.
val inline contains : value:'T -> array:'T [] -> bool when 'T : equality
/// Builds a new array that contains the elements of the given array.
/// array: The input array.
val copy : array:'T [] -> 'T []
/// Applies a key-generating function to each element of an array and returns an array yielding unique keys and their number of occurrences in the original array.
/// projection: A function transforming each item of the input array into a key to be compared against the others.
/// array: The input array.
val countBy : projection:('T -> 'Key) -> array:'T [] -> ('Key * int) [] when 'Key : equality
/// Creates an array whose elements are all initially the given value.
/// count: The length of the array to create.
/// value: The value for the elements.
val create : count:int -> value:'T -> 'T []
/// Returns the first element of the array, or None if the array is empty.
/// array: The input array.
val tryHead : array:'T [] -> 'T option
/// Applies the given function to successive elements, returning the first result where function returns Some(x) for some x. If the function never returns Some(x) then None is returned.
/// chooser: The function to transform the array elements into options.
/// array: The input array.
val tryPick : chooser:('T -> 'U option) -> array:'T [] -> 'U option
/// Fills a range of elements of the array with the given value.
/// target: The target array.
/// targetIndex: The index of the first element to set.
/// count: The number of elements to set.
/// value: The value to set.
val fill : target:'T [] -> targetIndex:int -> count:int -> value:'T -> unit
/// Applies the given function to successive elements, returning the first result where function returns Some(x) for some x. If the function never returns Some(x) then KeyNotFoundException is raised.
/// chooser: The function to generate options from the elements.
/// array: The input array.
val pick : chooser:('T -> 'U option) -> array:'T [] -> 'U
/// Applies the given function to each element of the array. Returns the array comprised of the results "x" for each element where the function returns Some(x)
/// chooser: The function to generate options from the elements.
/// array: The input array.
val choose : chooser:('T -> 'U option) -> array:'T [] -> 'U []
/// Divides the input array into chunks of size at most chunkSize.
/// chunkSize: The maximum size of each chunk.
/// array: The input array.
val chunkBySize : chunkSize:int -> array:'T [] -> 'T [] []
/// Returns an array that contains no duplicate entries according to generic hash and equality comparisons on the entries.  If an element occurs multiple times in the array then the later occurrences are discarded.
/// array: The input array.
val distinct : array:'T [] -> 'T [] when 'T : equality
/// Returns an array that contains no duplicate entries according to the generic hash and equality comparisons on the keys returned by the given key-generating function.  If an element occurs multiple times in the array then the later occurrences are discarded.
/// projection: A function transforming the array items into comparable keys.
/// array: The input array.
val distinctBy : projection:('T -> 'Key) -> array:'T [] -> 'T [] when 'Key : equality
/// Splits the input array into at most count chunks.
/// count: The maximum number of chunks.
/// array: The input array.
val splitInto : count:int -> array:'T [] -> 'T [] []
/// Returns an empty array of the given type.
val empty : 'T []
/// Returns the only element of the array.
/// array: The input array.
val exactlyOne : array:'T [] -> 'T
/// Returns a new list with the distinct elements of the input array which do not appear in the itemsToExclude sequence, using generic hash and equality comparisons to compare values.
/// itemsToExclude: A sequence whose elements that also occur in the input array will cause those elements to be removed from the result.
/// array: An array whose elements that are not also in itemsToExclude will be returned.
val except : itemsToExclude:seq<'T> -> array:'T [] -> 'T [] when 'T : equality
/// Tests if any element of the array satisfies the given predicate.
/// predicate: The function to test the input elements.
/// array: The input array.
val exists : predicate:('T -> bool) -> array:'T [] -> bool
/// Tests if any pair of corresponding elements of the arrays satisfies the given predicate.
/// predicate: The function to test the input elements.
/// array1: The first input array.
/// array2: The second input array.
val exists2 : predicate:('T1 -> 'T2 -> bool) -> array1:'T1 [] -> array2:'T2 [] -> bool
/// Returns a new collection containing only the elements of the collection for which the given predicate returns "true".
/// predicate: The function to test the input elements.
/// array: The input array.
val filter : predicate:('T -> bool) -> array:'T [] -> 'T []
/// Returns the first element for which the given function returns 'true'.  Raise KeyNotFoundException if no such element exists.
/// predicate: The function to test the input elements.
/// array: The input array.
val find : predicate:('T -> bool) -> array:'T [] -> 'T
/// Returns the last element for which the given function returns 'true'.  Raise KeyNotFoundException if no such element exists.
/// predicate: The function to test the input elements.
/// array: The input array.
val findBack : predicate:('T -> bool) -> array:'T [] -> 'T
/// Returns the index of the first element in the array that satisfies the given predicate. Raise KeyNotFoundException if none of the elements satisfy the predicate.
/// predicate: The function to test the input elements.
/// array: The input array.
val findIndex : predicate:('T -> bool) -> array:'T [] -> int
/// Returns the index of the last element in the array that satisfies the given predicate. Raise KeyNotFoundException if none of the elements satisfy the predicate.
/// predicate: The function to test the input elements.
/// array: The input array.
val findIndexBack : predicate:('T -> bool) -> array:'T [] -> int
/// Tests if all elements of the array satisfy the given predicate.
/// predicate: The function to test the input elements.
/// array: The input array.
val forall : predicate:('T -> bool) -> array:'T [] -> bool
/// Tests if all corresponding elements of the array satisfy the given predicate pairwise.
/// predicate: The function to test the input elements.
/// array1: The first input array.
/// array2: The second input array.
val forall2 : predicate:('T1 -> 'T2 -> bool) -> array1:'T1 [] -> array2:'T2 [] -> bool
/// Applies a function to each element of the collection, threading an accumulator argument through the computation. If the input function is f and the elements are i0...iN then computes f (... (f s i0)...) iN
/// folder: The function to update the state given the input elements.
/// state: The initial state.
/// array: The input array.
val fold : folder:('State -> 'T -> 'State) -> state:'State -> array:'T [] -> 'State
/// Applies a function to each element of the array, starting from the end, threading an accumulator argument through the computation. If the input function is f and the elements are i0...iN then computes f i0 (...(f iN s))
/// folder: The function to update the state given the input elements.
/// array: The input array.
/// state: The initial state.
val foldBack : folder:('T -> 'State -> 'State) -> array:'T [] -> state:'State -> 'State
/// Applies a function to pairs of elements drawn from the two collections, left-to-right, threading an accumulator argument through the computation. The two input arrays must have the same lengths, otherwise an ArgumentException is raised.
/// folder: The function to update the state given the input elements.
/// state: The initial state.
/// array1: The first input array.
/// array2: The second input array.
val fold2 : folder:('State -> 'T1 -> 'T2 -> 'State) -> state:'State -> array1:'T1 [] -> array2:'T2 [] -> 'State
/// Apply a function to pairs of elements drawn from the two collections, right-to-left, threading an accumulator argument through the computation. The two input arrays must have the same lengths, otherwise an ArgumentException is raised.
/// folder: The function to update the state given the input elements.
/// array1: The first input array.
/// array2: The second input array.
/// state: The initial state.
val foldBack2 : folder:('T1 -> 'T2 -> 'State -> 'State) -> array1:'T1 [] -> array2:'T2 [] -> state:'State -> 'State
/// Gets an element from an array.
/// array: The input array.
/// index: The input index.
val get : array:'T [] -> index:int -> 'T
/// Returns the first element of the array.
/// array: The input array.
val head : array:'T [] -> 'T
/// Applies a key-generating function to each element of an array and yields an array of unique keys. Each unique key contains an array of all elements that match to this key.
/// projection: A function that transforms an element of the array into a comparable key.
/// array: The input array.
val groupBy : projection:('T -> 'Key) -> array:'T [] -> ('Key * 'T []) [] when 'Key : equality
/// Builds a new array whose elements are the corresponding elements of the input array paired with the integer index (from 0) of each element.
/// array: The input array.
val indexed : array:'T [] -> (int * 'T) []
/// Creates an array given the dimension and a generator function to compute the elements.
/// count: The number of elements to initialize.
/// initializer: The function to generate the initial values for each index.
val inline init : count:int -> initializer:(int -> 'T) -> 'T []
/// Creates an array where the entries are initially the default value Unchecked.defaultof<'T>.
/// count: The length of the array to create.
val zeroCreate : count:int -> 'T []
/// Returns true if the given array is empty, otherwise false.
/// array: The input array.
val isEmpty : array:'T [] -> bool
/// Applies the given function to each element of the array.
/// action: The function to apply.
/// array: The input array.
val inline iter : action:('T -> unit) -> array:'T [] -> unit
/// Applies the given function to pair of elements drawn from matching indices in two arrays. The two arrays must have the same lengths, otherwise an ArgumentException is raised.
/// action: The function to apply.
/// array1: The first input array.
/// array2: The second input array.
val iter2 : action:('T1 -> 'T2 -> unit) -> array1:'T1 [] -> array2:'T2 [] -> unit
/// Applies the given function to each element of the array. The integer passed to the function indicates the index of element.
/// action: The function to apply to each index and element.
/// array: The input array.
val iteri : action:(int -> 'T -> unit) -> array:'T [] -> unit
/// Applies the given function to pair of elements drawn from matching indices in two arrays, also passing the index of the elements. The two arrays must have the same lengths, otherwise an ArgumentException is raised.
/// action: The function to apply to each index and pair of elements.
/// array1: The first input array.
/// array2: The second input array.
val iteri2 : action:(int -> 'T1 -> 'T2 -> unit) -> array1:'T1 [] -> array2:'T2 [] -> unit
/// Returns the last element of the array.
/// array: The input array.
val inline last : array:'T [] -> 'T
/// Gets an element from an array.
/// index: The input index.
/// array: The input array.
val item : index:int -> array:'T [] -> 'T
/// Returns the length of an array. You can also use property arr.Length.
/// array: The input array.
val length : array:'T [] -> int
/// Returns the last element of the array.  Return None if no such element exists.
/// array: The input array.
val tryLast : array:'T [] -> 'T option
/// Builds a new array whose elements are the results of applying the given function to each of the elements of the array.
/// mapping: The function to transform elements of the array.
/// array: The input array.
val inline map : mapping:('T -> 'U) -> array:'T [] -> 'U []
/// Builds a new collection whose elements are the results of applying the given function to the corresponding elements of the two collections pairwise. The two input arrays must have the same lengths, otherwise an ArgumentException is raised.
/// mapping: The function to transform the pairs of the input elements.
/// array1: The first input array.
/// array2: The second input array.
val map2 : mapping:('T1 -> 'T2 -> 'U) -> array1:'T1 [] -> array2:'T2 [] -> 'U []
/// Combines map and fold. Builds a new array whose elements are the results of applying the given function to each of the elements of the input array. The function is also used to accumulate a final value.
/// mapping: The function to transform elements from the input array and accumulate the final value.
/// state: The initial state.
/// array: The input array.
val mapFold : mapping:('State -> 'T -> 'Result * 'State) -> state:'State -> array:'T [] -> 'Result [] * 'State
/// Combines map and foldBack. Builds a new array whose elements are the results of applying the given function to each of the elements of the input array. The function is also used to accumulate a final value.
/// mapping: The function to transform elements from the input array and accumulate the final value.
/// array: The input array.
/// state: The initial state.
val mapFoldBack : mapping:('T -> 'State -> 'Result * 'State) -> array:'T [] -> state:'State -> 'Result [] * 'State
/// Builds a new collection whose elements are the results of applying the given function to the corresponding triples from the three collections. The three input arrays must have the same length, otherwise an ArgumentException is raised.
/// mapping: The function to transform the pairs of the input elements.
/// array1: The first input array.
/// array2: The second input array.
/// array3: The third input array.
val map3 : mapping:('T1 -> 'T2 -> 'T3 -> 'U) -> array1:'T1 [] -> array2:'T2 [] -> array3:'T3 [] -> 'U []
/// Builds a new collection whose elements are the results of applying the given function to the corresponding elements of the two collections pairwise, also passing the index of the elements. The two input arrays must have the same lengths, otherwise an ArgumentException is raised.
/// mapping: The function to transform pairs of input elements and their indices.
/// array1: The first input array.
/// array2: The second input array.
val mapi2 : mapping:(int -> 'T1 -> 'T2 -> 'U) -> array1:'T1 [] -> array2:'T2 [] -> 'U []
/// Builds a new array whose elements are the results of applying the given function to each of the elements of the array. The integer index passed to the function indicates the index of element being transformed.
/// mapping: The function to transform elements and their indices.
/// array: The input array.
val mapi : mapping:(int -> 'T -> 'U) -> array:'T [] -> 'U []
/// Returns the greatest of all elements of the array, compared via Operators.max on the function result.
/// array: The input array.
val inline max : array:'T [] -> 'T when 'T : comparison
/// Returns the greatest of all elements of the array, compared via Operators.max on the function result.
/// projection: The function to transform the elements into a type supporting comparison.
/// array: The input array.
val inline maxBy : projection:('T -> 'U) -> array:'T [] -> 'T when 'U : comparison
/// Returns the lowest of all elements of the array, compared via Operators.min.
/// array: The input array.
val inline min : array:'T [] -> 'T when 'T : comparison
/// Returns the lowest of all elements of the array, compared via Operators.min on the function result.
/// projection: The function to transform the elements into a type supporting comparison.
/// array: The input array.
val inline minBy : projection:('T -> 'U) -> array:'T [] -> 'T when 'U : comparison
/// Builds an array from the given list.
/// list: The input list.
val ofList : list:'T list -> 'T []
/// Builds a new array from the given enumerable object.
/// source: The input sequence.
val ofSeq : source:seq<'T> -> 'T []
/// Returns an array of each element in the input array and its predecessor, with the exception of the first element which is only returned as the predecessor of the second element.
/// array: The input array.
val pairwise : array:'T [] -> ('T * 'T) []
/// Splits the collection into two collections, containing the elements for which the given predicate returns "true" and "false" respectively.
/// predicate: The function to test the input elements.
/// array: The input array.
val partition : predicate:('T -> bool) -> array:'T [] -> 'T [] * 'T []
/// Returns an array with all elements permuted according to the specified permutation.
/// indexMap: The function that maps input indices to output indices.
/// array: The input array.
val permute : indexMap:(int -> int) -> array:'T [] -> 'T []
/// Applies a function to each element of the array, threading an accumulator argument through the computation. If the input function is f and the elements are i0...iN then computes f (... (f i0 i1)...) iN.  Raises ArgumentException if the array has size zero.
/// reduction: The function to reduce a pair of elements to a single element.
/// array: The input array.
val reduce : reduction:('T -> 'T -> 'T) -> array:'T [] -> 'T
/// Applies a function to each element of the array, starting from the end, threading an accumulator argument through the computation. If the input function is f and the elements are i0...iN then computes f i0 (...(f iN-1 iN)).
/// reduction: A function that takes in the next-to-last element of the list and the current accumulated result to produce the next accumulated result.
/// array: The input array.
val reduceBack : reduction:('T -> 'T -> 'T) -> array:'T [] -> 'T
/// Creates an array by replicating the given initial value.
/// count: The number of elements to replicate.
/// initial: The value to replicate
val replicate : count:int -> initial:'T -> 'T []
/// Returns a new array with the elements in reverse order.
/// array: The input array.
val rev : array:'T [] -> 'T []
/// Like fold, but return the intermediary and final results.
/// folder: The function to update the state given the input elements.
/// state: The initial state.
/// array: The input array.
val scan : folder:('State -> 'T -> 'State) -> state:'State -> array:'T [] -> 'State []
/// Like foldBack, but return both the intermediary and final results.
/// folder: The function to update the state given the input elements.
/// array: The input array.
/// state: The initial state.
val scanBack : folder:('T -> 'State -> 'State) -> array:'T [] -> state:'State -> 'State []
/// Returns an array that contains one item only.
/// value: The input item.
val inline singleton : value:'T -> 'T []
/// Sets an element of an array.
/// array: The input array.
/// index: The input index.
/// value: The input value.
val set : array:'T [] -> index:int -> value:'T -> unit
/// Builds a new array that contains the elements of the given array, excluding the first N elements.
/// count: The number of elements to skip.
/// array: The input array.
val skip : count:int -> array:'T [] -> 'T []
/// Bypasses elements in an array while the given predicate returns true, and then returns the remaining elements in a new array.
/// predicate: A function that evaluates an element of the array to a boolean value.
/// source: The input array.
val skipWhile : predicate:('T -> bool) -> array:'T [] -> 'T []
/// Builds a new array that contains the given subrange specified by starting index and length.
/// array: The input array.
/// startIndex: The index of the first element of the sub array.
/// count: The length of the sub array.
val sub : array:'T [] -> startIndex:int -> count:int -> 'T []
/// Sorts the elements of an array, returning a new array. Elements are compared using Operators.compare.
/// array: The input array.
val sort : array:'T [] -> 'T [] when 'T : comparison
/// Sorts the elements of an array, using the given projection for the keys and returning a new array. Elements are compared using Operators.compare.
/// projection: The function to transform array elements into the type that is compared.
/// array: The input array.
val sortBy : projection:('T -> 'Key) -> array:'T [] -> 'T [] when 'Key : comparison
/// Sorts the elements of an array, using the given comparison function as the order, returning a new array.
/// comparer: The function to compare pairs of array elements.
/// array: The input array.
val sortWith : comparer:('T -> 'T -> int) -> array:'T [] -> 'T []
/// Sorts the elements of an array by mutating the array in-place, using the given projection for the keys. Elements are compared using Operators.compare.
/// projection: The function to transform array elements into the type that is compared.
/// array: The input array.
val sortInPlaceBy : projection:('T -> 'Key) -> array:'T [] -> unit when 'Key : comparison
/// Sorts the elements of an array by mutating the array in-place, using the given comparison function as the order.
/// comparer: The function to compare pairs of array elements.
/// array: The input array.
val sortInPlaceWith : comparer:('T -> 'T -> int) -> array:'T [] -> unit
/// Sorts the elements of an array by mutating the array in-place, using the given comparison function. Elements are compared using Operators.compare.
/// array: The input array.
val sortInPlace : array:'T [] -> unit when 'T : comparison
/// Splits an array into two arrays, at the given index.
/// index: The index at which the array is split.
/// array: The input array.
val splitAt : index:int -> array:'T [] -> 'T [] * 'T []
/// Sorts the elements of an array, in descending order, returning a new array. Elements are compared using Operators.compare.
/// array: The input array.
val inline sortDescending : array:'T [] -> 'T [] when 'T : comparison
/// Sorts the elements of an array, in descending order, using the given projection for the keys and returning a new array. Elements are compared using Operators.compare.
/// projection: The function to transform array elements into the type that is compared.
/// array: The input array.
val inline sortByDescending : projection:('T -> 'Key) -> array:'T [] -> 'T [] when 'Key : comparison
/// Returns the sum of the elements in the array.
/// array: The input array.
val inline sum : array: ^T [] ->  ^T when ^T : (static member ( + ) :  ^T *  ^T ->  ^T) and ^T : (static member Zero :  ^T)
/// Returns the sum of the results generated by applying the function to each element of the array.
/// projection: The function to transform the array elements into the type to be summed.
/// array: The input array.
val inline sumBy : projection:('T ->  ^U) -> array:'T [] ->  ^U when ^U : (static member ( + ) :  ^U *  ^U ->  ^U) and ^U : (static member Zero :  ^U)
/// Returns the first N elements of the array.
/// count: The number of items to take.
/// array: The input array.
val take : count:int -> array:'T [] -> 'T []
/// Returns an array that contains all elements of the original array while the given predicate returns true, and then returns no further elements.
/// predicate: A function that evaluates to false when no more items should be returned.
/// array: The input array.
val takeWhile : predicate:('T -> bool) -> array:'T [] -> 'T []
/// Returns a new array containing the elements of the original except the first element.
/// array: The input array.
val tail : array:'T [] -> 'T []
/// Builds a list from the given array.
/// array: The input array.
val toList : array:'T [] -> 'T list
/// Views the given array as a sequence.
/// array: The input array.
val toSeq : array:'T [] -> seq<'T>
/// Returns at most N elements in a new array.
/// count: The maximum number of items to return.
/// array: The input array.
val truncate : count:int -> array:'T [] -> 'T []
/// Returns the first element for which the given function returns true.  Return None if no such element exists.
/// predicate: The function to test the input elements.
/// array: The input array.
val tryFind : predicate:('T -> bool) -> array:'T [] -> 'T option
/// Returns the last element for which the given function returns true.  Return None if no such element exists.
/// predicate: The function to test the input elements.
/// array: The input array.
val tryFindBack : predicate:('T -> bool) -> array:'T [] -> 'T option
/// Returns the index of the first element in the array that satisfies the given predicate.
/// predicate: The function to test the input elements.
/// array: The input array.
val tryFindIndex : predicate:('T -> bool) -> array:'T [] -> int option
/// Tries to find the nth element in the array.  Returns None if index is negative or the input array does not contain enough elements.
/// index: The index of element to retrieve.
/// source: The input array.
val tryItem : index:int -> array:'T [] -> 'T option
/// Returns the index of the last element in the array that satisfies the given predicate.
/// predicate: The function to test the input elements.
/// array: The input array.
val tryFindIndexBack : predicate:('T -> bool) -> array:'T [] -> int option
/// Returns an array that contains the elements generated by the given computation.  The given initial state argument is passed to the element generator.
/// generator: A function that takes in the current state and returns an option tuple of the next element of the array and the next state value.
/// state: The initial state value.
val unfold : generator:('State -> ('T * 'State) option) -> state:'State -> 'T []
/// Splits an array of pairs into two arrays.
/// array: The input array.
val unzip : array:('T1 * 'T2) [] -> 'T1 [] * 'T2 []
/// Splits an array of triples into three arrays.
/// array: The input array.
val unzip3 : array:('T1 * 'T2 * 'T3) [] -> 'T1 [] * 'T2 [] * 'T3 []
/// Returns a new array containing only the elements of the array for which the given predicate returns "true".
/// predicate: The function to test the input elements.
/// array: The input array.
val where : predicate:('T -> bool) -> array:'T [] -> 'T []
/// Returns an array of sliding windows containing elements drawn from the input array. Each window is returned as a fresh array.
/// windowSize: The number of elements in each window.
/// array: The input array.
val windowed : windowSize:int -> array:'T [] -> 'T [] []
/// Combines the two arrays into an array of pairs. The two arrays must have equal lengths, otherwise an ArgumentException is raised.
/// array1: The first input array.
/// array2: The second input array.
val zip : array1:'T1 [] -> array2:'T2 [] -> ('T1 * 'T2) []
/// Combines three arrays into an array of pairs. The three arrays must have equal lengths, otherwise an ArgumentException is raised.
/// array1: The first input array.
/// array2: The second input array.
/// array3: The third input array.
val zip3 : array1:'T1 [] -> array2:'T2 [] -> array3:'T3 [] -> ('T1 * 'T2 * 'T3) []

/// Provides parallel operations on arrays
module Parallel = 
    
    /// Apply the given function to each element of the array. Return the array comprised of the results "x" for each element where the function returns Some(x).
    /// chooser: The function to generate options from the elements.
    /// array: The input array.
    val choose : chooser:('T -> 'U option) -> array:'T [] -> 'U []
    /// For each element of the array, apply the given function. Concatenate all the results and return the combined array.
    /// mapping: 
    /// array: The input array.
    val collect : mapping:('T -> 'U []) -> array:'T [] -> 'U []
    /// Build a new array whose elements are the results of applying the given function to each of the elements of the array.
    /// mapping: 
    /// array: The input array.
    val map : mapping:('T -> 'U) -> array:'T [] -> 'U []
    /// Build a new array whose elements are the results of applying the given function to each of the elements of the array. The integer index passed to the function indicates the index of element being transformed.
    /// mapping: 
    /// array: The input array.
    val mapi : mapping:(int -> 'T -> 'U) -> array:'T [] -> 'U []
    /// Apply the given function to each element of the array.
    /// action: 
    /// array: The input array.
    val iter : action:('T -> unit) -> array:'T [] -> unit
    /// Apply the given function to each element of the array. The integer passed to the function indicates the index of element.
    /// action: 
    /// array: The input array.
    val iteri : action:(int -> 'T -> unit) -> array:'T [] -> unit
    /// Create an array given the dimension and a generator function to compute the elements.
    /// count: 
    /// initializer: 
    val init : count:int -> initializer:(int -> 'T) -> 'T []
    /// Split the collection into two collections, containing the elements for which the given predicate returns "true" and "false" respectively
    /// predicate: The function to test the input elements.
    /// array: The input array.
    val partition : predicate:('T -> bool) -> array:'T [] -> 'T [] * 'T []

