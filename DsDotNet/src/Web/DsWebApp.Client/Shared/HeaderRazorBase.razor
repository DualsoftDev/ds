@* HeaderRazorBase *@
@using Dual.Web.Blazor.Auth
@using Dual.Web.Blazor.Client.Theme

<CompSessionLogin/>
<CompThemeSwitcher Theme="@(Theme.DevExpressDark)" />

<!-- Login Modal -->
<div class="modal fade" id="loginModal" tabindex="-1" role="dialog" aria-labelledby="loginModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="loginModalLabel">Login</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form>
                    <div class="form-group">
                        <label for="username">Username:</label>
                        <input type="text" class="form-control" id="username" name="username" required>
                    </div>
                    <div class="form-group">
                        <label for="password">Password:</label>
                        <input type="password" class="form-control" id="password" name="password" required>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" onclick="Authenticate">Login</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>
<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>

@code {
    protected async Task Authenticate()
    {
        var username = await JsDual.GetElementById("username");
        var password = await JsDual.GetElementById("password");
        Console.WriteLine($"Got UserNaem={username}, Pwd={password}");

        // var loginResponse = await Http.PostAsJsonAsync<LoginRequest>("/api/auth/login", _loginRequest);
        // Console.WriteLine($"Requesting Login: {_loginRequest.UserName}/{_loginRequest.Password} : {loginResponse.IsSuccessStatusCode}");

        // if (loginResponse.IsSuccessStatusCode)
        // {
        //     var userSession = await loginResponse.Content.ReadFromJsonAsync<UserSession>();
        //     var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthenticationStateProvider;
        //     await customAuthStateProvider.UpdateAuthenticationState(userSession);
        //     NavigationManager.NavigateTo("/", true);
        // }
        // else if (loginResponse.StatusCode == HttpStatusCode.Unauthorized)
        // {
        //     await JsRuntime.InvokeVoidAsync("alert", "Invalid User Name or Password");
        //     return;
        // }
    }
}
