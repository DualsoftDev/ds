- CallDev status

	---------------------------------------------
			지시(TX)				관찰(RX)
	---------------------------------------------
		R	H					↑(Origin 부합)
		G	↑(TX) (잘)			x
		F	G					↑(관찰)
		H	↑(P.reset)			-
	---------------------------------------------
	(잘) : parent segment 가 child call 에 대해서 적절한 시점에 TX 를 ON 시켰다는 것을 가정

- Real segment 에서 Paused 상태 변수 제거.  실시간 계산
  G or H 이면서 자식 중 Ready 와 Finish 섞여 있으면 Paused

- Real 은 RGFH 상태 동적 계산
- CallDev 은 RGFH 상태 저장

- CallDev 별 TXs, RXs 모든 call 에 대해서 새로운 tag 생성
  - e.g 동일 C1 call 을 여러 군데 사용하였을 경우, C1 의 TX 및 RX tag 는 매 call instance 마다 별도로 생성

- CallDev 의 TXs 및 RXs 모두 복수개 지원


- reset 까지 포함한 DAG, reset 도 순서 부여. reset 완료 후, 다음 작업 지정 가능
	- Child flow 에서는 reset edge 포함, 반드시 DAG 이어야 한다.
	- Child flow 에서 외부Real1 <||> 외부Real2 --> DAG 아니므로 불허한다.
	- Child flow 에서 Call1 <||> Call2 --> DAG 아니지만, 정보로만 사용되는 것이므로 허용한다.
	** Root flow 에서는 항상 <||> 를 허용한다.

- CallDev 의 reset 은 정보로만 사용한다. (실제 runtime 에서는 무효)
  * 원위치 정보 추출용으로 사용
  * Target system 의 Graph 탐색해서 call 의 상호 reset 정보를 추출하는 일은 하지 않는다.

- segment 의 child 는 call 뿐만아니라 외부 real 도 포함할 수 있다.		Child Coin => call or 외부 segment

↑

- 강연결 개발중(포기)
- DS 엔진 리뉴얼중


## Recursive System
	- 현재 구현된 model 구조는 system 이 대체함
	- ParserHelper: _system 을 _systemStack 으로 구현해서 push pop
	- NameComponents: 현행대로 최대 4단계로 유지?
		- A/B/C 와 같은 계층적 system 구성이 존재할 때
			- A 에서는 B API 는 호출할 수 있으나, C API 는 호출하지 못한다.
			- 즉, A 와 C 시스템은 서로를 알지 못한다.
			- B 는 A 를 부모로 알고, C 를 자식 으로 인지한다.


