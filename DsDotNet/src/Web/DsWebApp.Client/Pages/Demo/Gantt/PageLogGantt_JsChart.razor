@* https://jsfiddle.net/vr2Lpz8y/ *@

@page "/dashboards/log-gantt-jschart"
@using Dual.Web.Blazor.Client.Components.Chart
@using static Engine.Info.DBLoggerAnalysisDTOModule
@using FlatSpans = System.Tuple<string, Engine.Info.DBLoggerAnalysisDTOModule.Span[]>[];

<h3>PageLogGantt_JsChart</h3>




@if (_backupData == null)
{
    <LoadingSpinner />
}
else
{
    <div style="height:300px;">
        <canvas id=chartCanvas></canvas>
        @*         <CompChartJs ChartType="timeline" CanvasId=@_chartCanvasId
    Data="_backupData" Options="_backupOptions" />
    *@
    </div>

    <script>
        var options = {
            // Depricated and will be removed in future. Please use elements.* instead.
            // "colorFunction": function(text, data, dataset, index) {
            //     return Color('black');
            // },
            // "showText": true,
            // "textPadding": 4
            "elements": {
                "colorFunction": function (text, data, dataset, index) {
                    return Color('black');
                },
                "showText": true,
                "textPadding": 4
            },
            "tooltips": {
                "callbacks": {
                    "label": function (item) {
                        console.log(item);
                        let s = item.yLabel[0];
                        let e = item.yLabel[1];
                        let multilines = [`${typeof (s)}: ${s} ~ ${e}`];
                        multilines.push(JSON.stringify(item));
                        return multilines;
                    }
                }
            }
        }

        var config = {
            "type": "timeline",
            "data": chartData,
            "options": options
        }
        @* var chart = new Chart(document.getElementById("@_chartCanvasId").getContext('2d'), config); *@
        var chart = new Chart($('#chartCanvas')[0], config);

    </script>
}




@code {
    object _backupData, _backupOptions;
    // string _chartCanvasId = "myBackupCanvas" + Guid.NewGuid().ToString();
    string _chartCanvasId = "chartCanvasId";

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var flatSpans = await Http.GetFromJsonAsync<FlatSpans>("api/info/log-anal-info-flat");

        await JsDual.Eval(CompChartJs.ClickHandlerSnippet);

        _backupData = new
        {
            labels = flatSpans.Select(s => s.Item1).ToArray(),
            datasets = flatSpans.Select(s =>
            {
                var spans = s.Item2;
                return new
                {
                    label = s.Item1,
                    data = spans.Select(span => new object[] { span.Start, span.End, s.Item1 }).ToArray(),
                };
            }).ToArray(),
        };
        await JsDual.Eval($"window.chartData = {NewtonsoftJson.SerializeObject(_backupData)};");
    }
}
