@using static Engine.Core.TagWebModule

@using TagWeb = Engine.Core.TagWebModule.TagWeb
@using HMIButton = Tuple<Engine.Core.TagWebModule.TagWeb, Engine.Core.TagWebModule.TagWeb>  @* HMIPush * HMIFlickerLamp *@
@inherits CompHmiTagContainer

<h4 class="table-title">@TableName</h4>
<DxGrid Data="_items">
    <Columns>
        <DxGridDataColumn FieldName="PushButtonName" />
        <DxGridDataColumn FieldName="PushButtonValue" />
        <DxGridDataColumn FieldName="PushButtonKind" />
        <DxGridDataColumn FieldName="PushButtonKindDescription" Caption="PB Kind Desc" />
        <DxGridDataColumn FieldName="FlickerLampName" />
        <DxGridDataColumn FieldName="FlickerLampValue" />
        <DxGridDataColumn FieldName="FlickerLampKind" />
        <DxGridDataColumn FieldName="FlickerLampKindDescription" Caption="FL Desc"/>
    </Columns>
</DxGrid>

@code {
    [Parameter] public HMIButton[] HMIButtons { get; set; }
    [Parameter] public string TableName { get; set; }

    class HmiButtonRow
    {
        public TagWebORM pb;  // pushbutton
        public TagWebORM fl;  // flicker lamp
        public string PushButtonName => pb.Name;
        public object PushButtonValue => pb.Value;
        public int PushButtonKind => pb.Kind;
        public string PushButtonKindDescription => pb.KindDescription;

        public string FlickerLampName => fl.Name;
        public object FlickerLampValue => fl.Value;
        public int FlickerLampKind => fl.Kind;
        public string FlickerLampKindDescription => fl.KindDescription;

        public HmiButtonRow(HMIButton hmiButton)
        {
            var (p, f) = hmiButton;
            pb = new TagWebORM(p);
            fl = new TagWebORM(f);
        }
    }
    HmiButtonRow[] _items;

    protected override async Task OnInitializedAsync()
    {
        await Task.Yield();
        _items = HMIButtons.Select(hb => new HmiButtonRow(hb)).ToArray();

        TagWebORM[] tagWebs = _items.SelectMany(x => new[] { x.pb, x.fl }).ToArray();
        await InitializeMapAsync(tagWebs);
    }
    public override void UpdateStateHasChanged() => StateHasChanged();

}
