@* WgtAutoManualSelectorPb *@

@using Engine.Core
@using System.Reactive.Subjects
@using SimpleResult = Dual.Common.Core.ResultSerializable<string, string>;
@implements IAsyncDisposable


<DxButton Click="@onAutoClick" Text="@_autoText" RenderStyleMode="@_autoStyle" />
<DxButton Click="@onManualClick" Text="@_manualText" RenderStyleMode="@_manualStyle" />

@code {
    CompositeDisposable _disposables = new ();
    // [Parameter] public EventCallback<MouseEventArgs> Click { get; set; }
    [Parameter] public string FlowName { get; set; }
    [Parameter] public TagWeb TagAuto { get; set; }
    [Parameter] public TagWeb TagManual { get; set; }

    // https://demos.devexpress.com/blazor/Button
    ButtonRenderStyleMode _autoStyle = ButtonRenderStyleMode.Contained;
    ButtonRenderStyleMode _manualStyle = ButtonRenderStyleMode.Contained;

    string _autoText = "Auto";
    string _manualText = "Manual";
    protected override async Task OnInitializedAsync()
    {
        await Task.Yield();

        evaluateEnabled();
        IDisposable subscription =
            ClientGlobal.TagChangedSubject.Subscribe(tag =>
            {
                if (tag.IsEqual(TagAuto) || tag.IsEqual(TagManual))
                {
                    Console.WriteLine($"Auto/Manual change detected on flow: {FlowName}");
                    if (tag.IsEqual(TagAuto))
                        TagAuto.SetValue(tag.Value);
                    if (tag.IsEqual(TagManual))
                        TagManual.SetValue(tag.Value);

                    evaluateEnabled();
                    StateHasChanged();
                }
            });

        _disposables.Add(subscription);

        void evaluateEnabled()
        {
            var (a, m) = ((bool)TagAuto.Value, (bool)TagManual.Value);

            _autoStyle = (a ? ButtonRenderStyleMode.Outline : ButtonRenderStyleMode.Contained);
            _manualStyle = (m ? ButtonRenderStyleMode.Outline : ButtonRenderStyleMode.Contained);

            _autoText = (a ? "✓ " : "") + "Auto";
            _manualText = (m ? "✓ " : "") + "Manual";
        }
    }

    public async ValueTask DisposeAsync()
    {
        await Task.Yield();
        _disposables.Dispose();
        Console.WriteLine("WgtAutoManualSelectorPb.razor disposed!");
    }


    async Task postBoth()
    {
        SimpleResult result1 = null, result2 = null;
        if (await AuthenticationStateProvider.SetAuthHeaderAsync(Http))
        {
            result1 = await Http.PostAsJsonResultSimpleAsync("api/hmi/tag", TagAuto);

            await AuthenticationStateProvider.SetAuthHeaderAsync(Http);
            result2 = await Http.PostAsJsonResultSimpleAsync("api/hmi/tag", TagManual);
        }
        else
            NavigationManager.NavigateTo("/toplevel/login");

        if (result1.IsError || result2.IsError)
            await JsDual.Alert($"Error posting change: {result1.Error} | {result2.Error}");
    }

    async Task onAutoClick()
    {
        TagAuto.SetValue(true);
        TagManual.SetValue(false);
        await postBoth();
    }

    async Task onManualClick()
    {
        TagAuto.SetValue(false);
        TagManual.SetValue(true);
        var result1 = await Http.PostAsJsonResultSimpleAsync("api/hmi/tag", TagAuto);
        var result2 = await Http.PostAsJsonResultSimpleAsync("api/hmi/tag", TagManual);
        if (result1.IsError || result2.IsError)
            await JsDual.Alert($"Error posting change: {result1.Error} | {result2.Error}");
    }
}
