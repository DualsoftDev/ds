@page "/dashboards/dashboard"
@using static DsWebApp.Client.Pages.Dashboards.DsChartEfficiency
@using static Engine.Core.InfoPackageModule

@implements IAsyncDisposable

<CompTitle Icon="oi oi-puzzle-piece" Title="Dashboard" />



@if (_infoSystems == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <CompFqdnSelectorOverlay Systems="_infoSystems" OnItemSelected="onItemSelected">
        @if (_pops != null)
        {
            <DsChartEfficiency PopData="_pops" InnerTitle="@_selected.Name" />
            <DsMultiBarChartEfficiency InfoParent="Selected" />
            <DsInfoGridSingle Info="_selected" ClientSettings="@ClientGlobal.ClientSettings" />
        }
    </CompFqdnSelectorOverlay>
}


@code {
    IInfoBase _selected;
    InfoBase Selected { get; set; }
    EfficiencyCategoryItem[] _pops;

    InfoSystem[] _infoSystems;
    protected HubConnectionManager _hubConnectionManager;
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var result = await Http.GetResultSimpleAsync<string>("/api/info");
        result.Iter(
            ok =>
            {
                InfoSystem info = Newtonsoft.Json.JsonConvert.DeserializeObject<InfoSystem>(ok);
                _infoSystems = [info];
            },
            err => JsDual.Alert($"Failed to fetch info for dashboard.  {err}")
        );
        
        HubConnection hubConnection = await NavigationManager.ToAbsoluteUri("/hub/info").StartHubAsync();
        _hubConnectionManager = new HubConnectionManager(hubConnection, registerHubConnection);
        Console.WriteLine($"Hub initialized on PageDashboardGrid.razor");


        IDisposable registerHubConnection(HubConnection hubConnection)
        {
            return hubConnection.On<string>(SK.S2CNInfoChanged, async (string infoSystemStr) =>
            {
                await Task.Yield();
                bool initial = _infoSystems == null;
                InfoSystem info = Newtonsoft.Json.JsonConvert.DeserializeObject<InfoSystem>(infoSystemStr);
                _infoSystems = [info];


                if (_selected == null)
                {
                    if (initial)
                        StateHasChanged();
                }
                else
                {
                    IInfoBase newInfo = info.FindInfo(_selected.Fqdn).Value;
                    if (! newInfo.IsEqual(_selected))
                        onItemSelected(info);
                }
            });
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnectionManager != null)
        {
            await _hubConnectionManager.DisposeAsync();
            _hubConnectionManager = null;
        }
    }

    Random _random = new Random();
    void onItemSelected(IInfoBase info)
    {
        _selected = info;
        _pops = [
            new EfficiencyCategoryItem() { Category = EfficiencyPopType.가동 },
            new EfficiencyCategoryItem() { Category = EfficiencyPopType.비가동 },
            new EfficiencyCategoryItem() { Category = EfficiencyPopType.에러 },
        ];
        var (가동, 비가동, 에러) = (
                _pops[(int)EfficiencyPopType.가동],
                _pops[(int)EfficiencyPopType.비가동],
                _pops[(int)EfficiencyPopType.에러]);

        switch (info)
        {
            case InfoBase infoBase:
                var w = 0.0;
                switch (info)
                {
                    case InfoReal real:
                        w = real.WaitTime;
                        break;
                    case InfoCall call:
                        break;
                }
                var (d, e) = (infoBase.DriveAverage, infoBase.ErrorAverage);
                var a = d + e + w;
                가동.Value = 100 * d / a;
                에러.Value = 100 * e / a;
                비가동.Value = 100 * w / a;
                break;

            case InfoDevice device:
                break;

            default:
                Console.Error.WriteLine($"Unknown InfoBase type: {info.GetType().Name}");
                break;
        }

        Selected = _selected as InfoBase;
        StateHasChanged();
    }
}
