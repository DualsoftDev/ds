@page "/hmis/auto"
<h3>자동 조작</h3>

@using System.Collections.ObjectModel
@using static Engine.Core.TagWebModule
@using HMIButton = Tuple<Engine.Core.TagWebModule.TagWeb, Engine.Core.TagWebModule.TagWeb>  @* HMIPush * HMIFlickerLamp *@
@inherits CompHmiLoader
@implements IDisposable
@attribute [Authorize(Roles = "Administrator")]


@if (_loading)
{
    <p><em>Loading...</em></p>
}
else
{
    <p>
        <button class="btn btn-primary" @onclick="@onAuto">Auto</button>
        <button class="btn btn-primary" @onclick="@onManual">Manual</button>
        <button class="btn btn-primary" @onclick="@onReady">Ready</button>
        <button class="btn btn-primary" @onclick="@onDrive">Drive</button>
        <button class="btn btn-primary" @onclick="@onHome">Home</button>
        <button class="btn btn-primary" @onclick="@onClear">Clear</button>
        <button class="btn btn-primary" @onclick="@onStop">Stop</button>
        <button class="btn btn-primary" @onclick="@onEmStop">Em Stop</button>
        <button class="btn btn-primary" @onclick="@onTest">Test</button>
    </p>

    <CompHmiFlowTable Flows="@_system.Flows"/>
}


@code {
    // protected override async Task OnInitializedAsync()
    // {
    //     await base.OnInitializedAsync();
    // }
    public void Dispose()
    {
        Console.WriteLine($"Disposing PageHmiTags.razor");
    }

    async Task onAuto() { await JsDual.Alert("Auto"); }
    async Task onManual() { await JsDual.Alert("Auto"); }


    async Task onReady() { await JsDual.Alert("onReady"); }
    async Task onDrive() { await JsDual.Alert("onDrive"); }
    async Task onHome() { await JsDual.Alert("onHome"); }
    async Task onClear() { await JsDual.Alert("onClear"); }
    async Task onStop() { await JsDual.Alert("onStop"); }
    async Task onEmStop() { await JsDual.Alert("onEmStop"); }
    async Task onTest() { await JsDual.Alert("onTest"); }
}