@* CompKonvaJs *@

@* wwwroot/js/dualKonva.js 파일 참조 *@

@using System.Reactive.Linq
@implements IDisposable

@* https://konvajs.org/docs/index.html *@
@* - 부모 container 가 반드시 position: relative; 이어야 한다.
   - Tooltip 구현은 KonvaJs 에서 수행하지 않는 것으로 한다.  KonvaJs 가 scale 되다 보니, tooltip 표시가 어렵다.
     * Tooltip 은 외부에서 별도의 div 로 구현한다.
*@

<div style="@_style" class="sharp-bordered-red" id="@KonvaCanvasDivId" />


@code {
    string _style => $"position: absolute; top: {Rect.Top}px; left: {Rect.Left}px; width:{Rect.Width}px; height:{Rect.Height}px; opacity: {Opacity}";

    // Do not use property for _divId. It will be changed when re-rendering.
    public string KonvaCanvasDivId = "myKonva" + Guid.NewGuid().ToString();

    DotNetObjectReference<CompKonvaJs> _dotNetObjRef;

    [Parameter] public KonvaShape[] Shapes { get; set; }
    /// <summary>
    /// KonvaJS canvas 영역
    /// </summary>
    [EditorRequired][Parameter] public Rect Rect { get; set; }

    [Parameter] public double Opacity { get; set; } = 1; // 투명도 (0.0 완전 투명 ~ 1.0 완전 불투명)

    [Parameter] public double AspectRatioHorizontal { get; set; }
    [Parameter] public double AspectRatioVertical { get; set; }

    [Parameter] public EventCallback<ShapeInfo> OnShapeClick { get; set; }
    [Parameter] public EventCallback<ShapeInfo> OnShapeMouseOver { get; set; }
    [Parameter] public EventCallback<ShapeInfo> OnShapeMouseOut { get; set; }
    /// <summary>
    /// Tooltip 에 표시할 string 을 생성하는 함수
    /// </summary>
    [Parameter] public Func<int, string> TooltipTextGetter { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Console.WriteLine($"TLBW={Rect.Top:0.##}, {Rect.Left:0.##}, {Rect.Width:0.##}, {Rect.Height:0.##}");
        _dotNetObjRef = DotNetObjectReference.Create(this);
        await LoadKonvaJsScriptAsync(Http, JsDual);

        /* 첫 shape 깜박임 예제 */
        // var aShape = Shapes.First();
        // Observable.Interval(TimeSpan.FromSeconds(1))
        //     .Subscribe(async n =>
        //     {
        //         aShape.Stroke = n % 2 == 0 ? "red" : "blue";
        //         await JsRuntime.InvokeVoidAsync("replaceKonvaShape", _divId, aShape.Serialize());
        //     });
    }

    static int _loadingCounter = 0;
    static bool _loadedScript = false;
    /// <summary>
    /// dualKonva.js 를 로드한다.  SPA 구동시 한번만 로딩되면 된다.  
    /// loading 시점이 느려질 경우 예상 외의 bug 가 발생하므로, 외부에서 미리 로딩할 수도 있도록 static method 로 구현
    /// </summary>
    static public async Task LoadKonvaJsScriptAsync(HttpClient http, DualWebBlazorJsInterop jsDual)
    {
        if (_loadedScript)
            return;

        if (Interlocked.Increment(ref _loadingCounter) == 1)
        {
            Console.WriteLine($"Loading dualKonva.js...");
            var snippet = await http.GetStringAsync("./_content/Dual.Web.Blazor.Client/js/dualKonva.js");
            Console.WriteLine($"Loaded dualKonva.js: {snippet.Substring(0, 200)}...");
            await jsDual.Eval(snippet);
            Console.WriteLine($"Evaluated dualKonva.js.");
            _loadedScript = true;
        }
        else
        {
            while (!_loadedScript)
                await Task.Delay(100);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadKonvaJsScriptAsync(Http, JsDual);

            var json = $"[ {Shapes.Select(s => s.Serialize()).JoinString(",")} ]";
            await JsRuntime.InvokeVoidAsync("initKonva", _dotNetObjRef, json, KonvaCanvasDivId, AspectRatioHorizontal, AspectRatioVertical);

            /* 보험 : 정상적으로 동작하면 불필요하지만, konva icon 이 제대로 그려지지 않을 때가 있다. */
            await Task.Delay(2000);
            await JsRuntime.InvokeVoidAsync("refreshKonvaCanvas", KonvaCanvasDivId);
        }
    }

    /// <summary>
    /// Konva icon image 를 주어진 image url 의 것으로 대체
    /// </summary>
    public async Task ReplaceKonvaImage(KonvaImage image, string imageUrl)
    {
        await LoadKonvaJsScriptAsync(Http, JsDual);
        Console.WriteLine($"------------ CALL replaceKonvaImage js function: {image.Id}");
        await JsRuntime.InvokeVoidAsync("replaceKonvaImage", KonvaCanvasDivId, image.Id, imageUrl);
    }

    /// <summary>
    /// 창 크기 변경에 따라서 Konva canvas 크기를 조정한다.
    /// </summary>
    public async Task ResizeKonvaCanvasAsync(Rect rect, double aspectRatioHorizontal, double aspectRatioVertical)
    {
        await LoadKonvaJsScriptAsync(Http, JsDual);
        Rect = rect;
        var (x, y, w, h) = (rect.X, rect.Y, rect.W, rect.H);
        (AspectRatioHorizontal, AspectRatioVertical) = (aspectRatioHorizontal, aspectRatioVertical);
        Console.WriteLine($"ResizeKonvaCanvas: ({x:0.##}, {y:0.##}),  {w:0.##} x {h:0.##} : arh={AspectRatioHorizontal:0.##}, arv={AspectRatioVertical:0.##}");

        var exists = await JsDual.ExistsElementWithId(KonvaCanvasDivId);
        if (exists)
        {
            await JsDual.SetStyle(KonvaCanvasDivId, "left", $"{x}px");
            await JsDual.SetStyle(KonvaCanvasDivId, "top", $"{y}px");
            await JsDual.SetStyle(KonvaCanvasDivId, "width", $"{w}px");
            await JsDual.SetStyle(KonvaCanvasDivId, "height", $"{h}px");

            if (await JsDual.IsFunctionExists("resizeKonvaCanvas"))
                await JsRuntime.InvokeVoidAsync("resizeKonvaCanvas", this.KonvaCanvasDivId, Rect, AspectRatioHorizontal, AspectRatioVertical);
        }
    }

    [JSInvokable]
    public void ShapeClicked(int id, double x, double y)
    {
        Console.WriteLine($"ShapeClicked: {id} on ({x:0.##}, {y:0.##})");
        OnShapeClick.InvokeAsync(new ShapeInfo(id, x, y));
    }
    [JSInvokable]
    public void ShapeMouseOver(int id, double x, double y)
    {
        Console.WriteLine($"ShapeMouseOver: {id} on ({x:0.##}, {y:0.##}");
        OnShapeMouseOver.InvokeAsync(new ShapeInfo(id, x, y));
    }
    [JSInvokable]
    public void ShapeMouseOut(int id, double x, double y)
    {
        Console.WriteLine($"ShapeMouseOut: {id} on ({x:0.##}, {y:0.##}");
        OnShapeMouseOut.InvokeAsync(new ShapeInfo(id, x, y));
    }


    public void Dispose()
    {
        _dotNetObjRef?.Dispose();
        _dotNetObjRef = null;
    }
}




