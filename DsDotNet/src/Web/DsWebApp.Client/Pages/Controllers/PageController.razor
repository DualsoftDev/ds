@* PageController *@
@page "/controllers/controller"

@using System.Collections.ObjectModel
@using System.Text.Json


@attribute [Authorize(Roles = "Administrator,User")]

<CompTitle Icon="oi oi-puzzle-piece" Title="제어" />

@if (_loading)
{
    <p><em>Loading...</em></p>
}
else
{
    @if (ClientGlobal.ModelDsZipPath == null)
    {
        <ul>No model on server.</ul>
    }
    else
    {
        <CompEnableDisable Disabled="@_disableUI">
            <CompModelCpuMonitor OnModelChanged="@(_ => StateHasChanged())"
                                 OnCpuRunningStatusChanged="@(_ => StateHasChanged())" />
            <ul>SourceDsZipPath: @ClientGlobal.ModelDsZipPath</ul>
            <ul>Cpu Running: @_isRunning</ul>

            <button class="btn btn-primary" @onclick="Run" disabled="@_isRunning">Run</button>
            <button class="btn btn-primary" @onclick="Stop" disabled="@(!_isRunning)">Stop</button>
            <button class="btn btn-primary" @onclick="Step" disabled="@(!_isRunning)">Step</button>
            <button class="btn btn-primary" @onclick="Reset" disabled="@(!_isRunning)">Reset</button>

            <br />
            @if (_cgs != null)
            {
                <CompEnumSelector Title="Runtime Package: " TEnum="RuntimePackageCs"
                                  Disabled="@_isRunning"
                                  @bind-Value="RuntimePackage" />
            }
        </CompEnableDisable>
    }
}



@code {
    bool _loading = true;
    bool _isRunning => ClientGlobal.IsCpuRunning;
    bool _disableUI;

    ServerSettings _cgs => ClientGlobal.ServerSettings;
    RuntimePackageCs RuntimePackage {
        get => _cgs.RuntimePackageCs;
        set
        {
            var old = _cgs.RuntimePackageCs;
            if (old != value)
            {
                _cgs.RuntimePackageCs = value;
                // api 를 통해 ServerGlobal.ReloadRuntimeModel() 호출
                reloadModel(value).Wait();
            }
        }
    }
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await ClientGlobal.InitializeAsync(Http, NavigationManager, LocalStorage);
        _loading = false;
    }

    async Task executeRestApi(string api, string defaultOkMessage)
    {
        if (await AuthenticationStateProvider.SetAuthHeaderAsync(Http))
        {
            RestResult<string> result = await Http.GetRestResultAsync<string>(api);
            Console.WriteLine($"Result={result}, IsOK={result.IsOk}, Ok={result.Value}, Err={result.Error}");
            string message = 
                result.Match(
                    (ok) => $"OK: {ok}\r\n{defaultOkMessage}",
                    (err) => $"Failed to call [{api}].\r\n{err}"
                );
            await JsDual.Alert(message);
        }
        else
            NavigationManager.NavigateTo("/toplevel/login");
    }

    async Task Run()
    {
        await executeRestApi($"api/cpu/command/run", "Cpu running.");
    }
    async Task Stop()
    {
        await executeRestApi($"api/cpu/command/stop", "Cpu stopped.");
    }

    async Task Step()
    {
        await executeRestApi($"api/cpu/command/step", "Cpu step'ed.");
    }

    async Task Reset()
    {
        await executeRestApi($"api/cpu/command/reset", "Cpu reset'ed.");
    }

    async Task reloadModel(RuntimePackageCs runtimePackage)
    {
        _disableUI = true;
        StateHasChanged();
        await executeRestApi($"api/cpu/command/set-runtime-package/{runtimePackage}", "Runtime package changed.");
        await executeRestApi($"api/cpu/command/reload-model", "Model reloaded.");
        _disableUI = false;
        StateHasChanged();
    }

}
