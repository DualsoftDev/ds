@using Dual.Common.Core

@* @inherits HeaderRazorBase *@
@using Dual.Web.Blazor.Auth
@using Dual.Web.Blazor.Client.Auth
@using Dual.Web.Blazor.Client.Theme
@using System.Net

<CompSessionLogin />
<CompThemeSwitcher Theme="@(Theme.DevExpressDark)" />

<!-- Login Modal -->
<div class="modal fade" id="loginModal" tabindex="-1" role="dialog" aria-labelledby="loginModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="loginModalLabel">Login</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form>
                    <div class="form-group">
                        <label for="username">Username:</label>
                        <input type="text" class="form-control" id="username" name="username" @bind="_loginRequest.UserName" required>
                    </div>
                    <div class="form-group">
                        <label for="password">Password:</label>
                        <input type="password" class="form-control" id="password" name="password" @bind="_loginRequest.Password" required>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" onclick="@(() => Authenticate())">Login</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>
<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
<style>
    .link-with-underline {
        text-decoration: underline;
        color: #007bff;
        cursor: pointer;
    }</style>

<nav class="navbar header-navbar p-0">
    <button class="navbar-toggler bg-primary d-block" @onclick="OnToggleClick">
        <span class="navbar-toggler-icon"></span>
    </button>
    <div class="ms-3 fw-bold title pe-4">듀얼소프트 웹</div>

    <div class="ms-auto">
        @if (ClientGlobal.UserSession == null || !_authenticated)
        {
            @* <button type="button" class="btn btn-primary" onclick="@Authenticate" data-toggle="modal"  data-target="#loginModal">Login</button> *@
            @* <a href="#" data-toggle="modal" data-target="#loginModal">Login</a> *@

            <a class="link-with-underline" data-toggle="modal" data-target="#loginModal">Login</a>


            @* <a @onclick="Authenticate">Login</a> *@
            @* <a href="#" @onclick="Authenticate">Login</a> *@
@*             <a href="#" data-toggle="modal" data-target="#loginModal">Login</a>       @ * class="btn btn-primary"  * @
 *@            @* <a href="/toplevel/login">Login</a> *@
        }
        else
        {
            var name = ClientGlobal?.AuthenticationState?.User?.Identity?.Name;
            if (name.NonNullAny())
                name = $"({name})";
            <a @onclick="logout" href="javascript:void(0)">Logout @name</a>
        }
        &nbsp;&nbsp;
    </div>
</nav>

@code {
    [Parameter] public bool ToggleOn { get; set; }
    [Parameter] public EventCallback<bool> ToggleOnChanged { get; set; }

    async Task OnToggleClick() => await Toggle();

    async Task Toggle(bool? value = null) {
        var newValue = value ?? !ToggleOn;
        if(ToggleOn != newValue) {
            ToggleOn = newValue;
            await ToggleOnChanged.InvokeAsync(ToggleOn);
        }
    }

    async Task logout()
    {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthenticationStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(null);
        NavigationManager.NavigateTo("/", true);
    }

    bool _authenticated = false;
    protected override async Task OnInitializedAsync()
    {
        if (await AuthenticationStateProvider.SetAuthHeaderAsync(Http))
        {
            ResultSerializable<bool, ErrorMessage> result = await Http.GetResultSimpleAsync<bool>("api/auth/check");
            Console.WriteLine($"Result={result}, IsOK={result.IsOk}, Ok={result.Value}, Err={result.Error}");
            result.Iter(
                ok => _authenticated = ok,
                err => {});
        }
    }
    private LoginRequest _loginRequest = new();
    protected async Task Authenticate()
    {
        Console.WriteLine($"Got UserName={_loginRequest.UserName}, Pwd={_loginRequest.Password}");
        var loginResponse = await Http.PostAsJsonAsync<LoginRequest>("/api/auth/login", _loginRequest);
        Console.WriteLine($"Requesting Login: {_loginRequest.UserName}/{_loginRequest.Password} : {loginResponse.IsSuccessStatusCode}");

        if (loginResponse.IsSuccessStatusCode)
        {
            var userSession = await loginResponse.Content.ReadFromJsonAsync<UserSession>();
            var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthenticationStateProvider;
            await customAuthStateProvider.UpdateAuthenticationState(userSession);
            //NavigationManager.NavigateTo("/", true);
            StateHasChanged();
        }
        else if (loginResponse.StatusCode == HttpStatusCode.Unauthorized)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Invalid User Name or Password");
            return;
        }
    }

}