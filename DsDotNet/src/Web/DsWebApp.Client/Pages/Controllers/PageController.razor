@page "/controllers/controller"

@using System.Collections.ObjectModel
@using System.Text.Json


@attribute [Authorize(Roles = "Administrator,User")]
@implements IDisposable

<h3>PageController</h3>


@if (_loading)
{
    <p><em>Loading...</em></p>
}
else
{
    @if (_modelDto == null)
    {
        <ul>No model on server.</ul>
    }
    else
    {
        <ul>SourceDsZipPath: @_modelDto.SourceDsZipPath</ul>
        <ul>Cpu Running: @_isRunning</ul>

        <button class="btn btn-primary" @onclick="Run" disabled="@_isRunning">Run</button>
        <button class="btn btn-primary" @onclick="Stop" disabled="@(!_isRunning)">Stop</button>
        <button class="btn btn-primary" @onclick="Step" disabled="@(!_isRunning)">Step</button>
        <button class="btn btn-primary" @onclick="Reset" disabled="@(!_isRunning)">Reset</button>
    }
}





@code {
    bool _loading { get; set; } = true;
    bool _isRunning => _modelDto?.IsCpuRunning ?? false;
    RuntimeModelDto _modelDto;
    CompositeDisposable _disposables = new();

    protected override async Task OnInitializedAsync()
    {
        _modelDto = await ClientGlobal.GetModelDtoAsync(Http);

        _loading = false;

        var action = new Action<RuntimeModelDto>(modelDto => { _modelDto = modelDto; StateHasChanged(); });
        IDisposable subscription = await ClientGlobal.MonitorModelChangeAsync(NavigationManager, action);
        _disposables.Add(subscription);

        StateHasChanged();
        await base.OnInitializedAsync();
    }
    public void Dispose() => _disposables.Dispose();

    async Task executeRestApi(string api, string defaultOkMessage)
    {
        if (await AuthenticationStateProvider.SetAuthHeaderAsync(Http))
        {
            ResultSerializable<string, ErrorMessage> result = await Http.GetResultSimpleAsync<string>(api);
            Console.WriteLine($"Result={result}, IsOK={result.IsOk}, Ok={result.Value}, Err={result.Error}");
            string message = 
                result.Match(
                    (ok) => $"OK: {ok}\r\n{defaultOkMessage}",
                    (err) => $"Failed to call [{api}].\r\n{err}"
                );
            await JsDual.Alert(message);
        }
        else
            NavigationManager.NavigateTo("/toplevel/login");
    }


    async Task Run()
    {
        await executeRestApi($"api/cpu/command/run", "Cpu running.");
    }
    async Task Stop()
    {
        await executeRestApi($"api/cpu/command/stop", "Cpu stopped.");
    }

    async Task Step()
    {
        await executeRestApi($"api/cpu/command/step", "Cpu step'ed.");
    }

    async Task Reset()
    {
        await executeRestApi($"api/cpu/command/reset", "Cpu reset'ed.");
    }
}
