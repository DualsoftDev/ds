@page "/demo/data"
@using DsWebApp.Client.Data;
@* @inject IbackupDataProvider Backups; *@

<h3>설비 데이터 관리</h3>

@inject Sales Sales
<div class="row mt-4">
    <div class="row">
        @{
            DrawDonutChart(NYSalesData, "HMI 작화");
            DrawDonutChart(LSalesData, "PLC 프로그램");
            DrawDonutChart(BSalesData, "인버터 파라미터");
            DrawDonutChart(MSalesData, "서보 데이터");
            DrawDonutChart(MSalesData, "로봇 티칭 데이터");
        }
    </div>
</div>

@{
    void DrawDonutChart<T>(IEnumerable<T> data, string titleText)
    {
        <div class="d-flex flex-column col-md-2 col-lg-2 col-xl-2 justify-content-center align-items-center chart-item">
            <DxPieChart Data="data"
                        Width="75%"
                        InnerDiameter="0.5">
                <DxChartTitle Text="@titleText"/>
                <DxPieChartSeries T="DonutDataItem"
                                  TArgument="int"
                                  TValue="double"
                                  ArgumentField="s => s.Year"
                                  ValueField="s => s.Amount"
                                  SummaryMethod="Enumerable.Sum">
                    <DxChartSeriesLabel Visible="true"
                                        Position="RelativePosition.Inside"
                                        ValueFormat='ChartElementFormat.FromLdmlString("$#K")' />
                </DxPieChartSeries>
                <DxChartLegend Visible="false"
                                VerticalAlignment="VerticalEdge.Bottom"
                                Position="RelativePosition.Outside" />
                <DxChartTooltip Enabled="true" Position="RelativePosition.Outside">
                    <div class="m-2">
                        <div>
                            @($"{context.Point.Argument}: ${(double)context.Point.Value * 1000d:0.}")
                        </div>
                    </div>
                </DxChartTooltip>
            </DxPieChart>
            <div class="my-1"/>
            <div class="card w-100">
                <div class="card-body">
                    <h5 class="card-title">백업 상태</h5>
                    <div class="row">
                        <p class="col-md-6 card-text display-6">OK</p>
                        <p class="col-md-6 card-text display-6">0/12</p>
                    </div>
                </div>
            </div>
            <div class="my-1"/>
            <div class="card w-100">
                <div class="card-body">
                    <h5 class="card-title">데이터 변경</h5>
                    <div class="row">
                        <p class="col-md-6 card-text display-6"></p>
                        <p class="col-md-6 card-text display-6">0/12</p>
                    </div>
                </div>
            </div>
        </div>
    }
}

@code {
    class DonutDataItem
    {
        public int Year { get; }
        public double Amount { get; }
        public DonutDataItem(int year, double amount)
        {
            (Year, Amount) = (year, amount);
        }
    }
    IEnumerable<SaleInfo> WWSalesData;
    IEnumerable<DonutDataItem> NYSalesData;
    IEnumerable<DonutDataItem> LSalesData;
    IEnumerable<DonutDataItem> BSalesData;
    IEnumerable<DonutDataItem> MSalesData;
    protected override async Task OnInitializedAsync()
    {
        WWSalesData = await Sales.GetSalesAsync();
        Func<SaleInfo, DonutDataItem> selector = si => new(si.Date.Year, si.Amount / 1000d);
        NYSalesData = WWSalesData.Where(s => s.City == "New York").Select(selector);
        LSalesData = WWSalesData.Where(s => s.City == "London").Select(selector);
        BSalesData = WWSalesData.Where(s => s.City == "Berlin").Select(selector);
        MSalesData = WWSalesData.Where(s => s.City == "Moscow").Select(selector);
    }
}