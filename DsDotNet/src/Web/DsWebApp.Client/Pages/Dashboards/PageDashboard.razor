@page "/dashboards/dashboard"
@using static DsWebApp.Client.Pages.Dashboards.DsChartEfficiency
@using static Engine.Core.InfoPackageModule

<CompTitle Icon="oi oi-puzzle-piece" Title="Dashboard" />
<CompDashboardInfoFetcher OnInfoSystemUpdated="onInfoSystemUpdated" @ref="_compDashboardInfoFetcher" />


@if (_compDashboardInfoFetcher == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <CompFqdnSelectorOverlay System="_compDashboardInfoFetcher.InfoSystem" OnItemSelected="onItemSelected">
        @if (_selected != null)
        {
            <DsChartEfficiency PopData="_pops" InnerTitle="@_selected.Name" />
            <DsMultiBarChartEfficiency InfoParent="Selected" @ref="_multiBar" />
            @* <DsInfoGridSingle Info="_selected" ClientSettings="@ClientGlobal.ClientSettings" /> *@
        }
    </CompFqdnSelectorOverlay>
}


@code {
    CompDashboardInfoFetcher _compDashboardInfoFetcher;
    DsMultiBarChartEfficiency _multiBar;
    IInfoBase _selected;
    InfoBase Selected { get; set; }
    EfficiencyCategoryItem[] _pops;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _pops = [
            new EfficiencyCategoryItem() { Category = EfficiencyPopType.가동 },
            new EfficiencyCategoryItem() { Category = EfficiencyPopType.비가동 },
            new EfficiencyCategoryItem() { Category = EfficiencyPopType.에러 },
        ];
    }

    void onInfoSystemUpdated(InfoSystem infoSystem)
    {
        Console.WriteLine($"onInfoSystemUpdated: {infoSystem}");
        if (_selected == null)
        {
            Console.WriteLine($"No selected node.");
        }
        else
        {
            IInfoBase newInfo = infoSystem.FindInfo(_selected.Fqdn).Value;
            if (newInfo.IsEqual(_selected))
            {
                Console.WriteLine($"No value change for {_selected.Fqdn}");
                Selected = newInfo as InfoBase;
            }
            else
            {
                onItemSelected(newInfo);
            }
        }
        StateHasChanged();
    }

    void onItemSelected(IInfoBase info)
    {
        _selected = info;
        Selected = _selected as InfoBase;

        var (가동, 비가동, 에러) = (
                _pops[(int)EfficiencyPopType.가동],
                _pops[(int)EfficiencyPopType.비가동],
                _pops[(int)EfficiencyPopType.에러]);

        Console.WriteLine($"onItemSelected: OLD: {info.Fqdn}: 가동={가동.Value}, 비가동={비가동.Value}, 에러={에러.Value}");
        switch (info)
        {
            case InfoBase infoBase:
                var w = 0.0;
                switch (info)
                {
                    case InfoReal real:
                        w = real.WaitTime;
                        break;
                    case InfoCall call:
                        break;
                }
                var (d, e) = (infoBase.DriveAverage, infoBase.ErrorAverage);
                var a = d + e + w;
                if (a == 0)
                    (가동.Value, 비가동.Value, 에러.Value) = (0, 0, 0);
                else
                {
                    가동.Value = 100 * d / a;
                    에러.Value = 100 * e / a;
                    비가동.Value = 100 * w / a;
                }
                break;

            case InfoDevice device:
                break;

            default:
                Console.Error.WriteLine($"Unknown InfoBase type: {info.GetType().Name}");
                break;
        }
        Console.WriteLine($"onItemSelected: NEW: {info.Fqdn}: 가동={가동.Value}, 비가동={비가동.Value}, 에러={에러.Value}");

    }
}
