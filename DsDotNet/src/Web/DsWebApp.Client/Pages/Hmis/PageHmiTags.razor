@page "/hmis/tags"
@using System.Collections.ObjectModel
@using static Engine.Core.TagWebModule
@using HMIButton = Tuple<Engine.Core.TagWebModule.TagWeb, Engine.Core.TagWebModule.TagWeb>  @* HMIPush * HMIFlickerLamp *@


<h3>PageHmiTags</h3>

@if (!_loading)
{
    @if (_hmiTagPackage.AutoButtons.Any())
    {
        <CompHmiButtonTable TableName="Auto Buttons" HMIButtons=_hmiTagPackage.AutoButtons />
    }

    @if (_hmiTagPackage.ManualButtons.Any())
    {
        <CompHmiButtonTable TableName="Manual Buttons" HMIButtons=_hmiTagPackage.ManualButtons />
    }

    @if (_hmiTagPackage.DriveButtons.Any())
    {
        <CompHmiButtonTable TableName="Drive Buttons" HMIButtons=_hmiTagPackage.DriveButtons />
    }

    @if (_hmiTagPackage.StopButtons.Any())
    {
        <CompHmiButtonTable TableName="Stop Buttons" HMIButtons=_hmiTagPackage.StopButtons />
    }

    @if (_hmiTagPackage.ClearButtons.Any())
    {
        <CompHmiButtonTable TableName="Clear Buttons" HMIButtons=_hmiTagPackage.ClearButtons />
    }

    @if (_hmiTagPackage.EmergencyButtons.Any())
    {
        <CompHmiButtonTable TableName="Emergency Buttons" HMIButtons=_hmiTagPackage.EmergencyButtons />
    }

    @if (_hmiTagPackage.TestButtons.Any())
    {
        <CompHmiButtonTable TableName="Test Buttons" HMIButtons=_hmiTagPackage.TestButtons />
    }

    @if (_hmiTagPackage.HomeButtons.Any())
    {
        <CompHmiButtonTable TableName="Home Buttons" HMIButtons=_hmiTagPackage.HomeButtons />
    }

    @if (_hmiTagPackage.ReadyButtons.Any())
    {
        <CompHmiButtonTable TableName="Ready Buttons" HMIButtons=_hmiTagPackage.ReadyButtons />
    }




    @if (_hmiTagPackage.DeviceBtns.Any())
    {
        <CompDeviceButtonTable TableName="Device Buttons" HMIDevices=_hmiTagPackage.DeviceBtns />
    }

    @if (_hmiTagPackage.RealBtns.Any())
    {
        <CompRealButtonTable TableName="Real Buttons" RealButtons=_hmiTagPackage.RealBtns />
    }




}

<DxLoadingPanel @bind-Visible=_loading
                IsContentBlocked="true"
                CssClass="w-100"
                ApplyBackgroundShading="true">

    <DxGrid Data="_items">
        <Columns>
            <DxGridDataColumn FieldName="Name" />
            <DxGridDataColumn FieldName="Value" />
            <DxGridDataColumn FieldName="Kind" />
            <DxGridDataColumn FieldName="Message" />
        </Columns>
    </DxGrid>
</DxLoadingPanel>

@code {
    class TagWebORM(string name, object value, int kind, string message)
    {
        public string Name => name;
        public string Message => message;
        public object Value => value;
        public int Kind => kind;

        public TagWebORM(TagWeb tagWeb) : this(tagWeb.Name, tagWeb.Value, tagWeb.Kind, tagWeb.Message)
        {            
        }
    };

    bool _loading { get; set; } = true;
    HmiTagPackage _hmiTagPackage;
    ObservableCollection<TagWebORM> _items;
    HubConnection _hubConnection;
    IDisposable _subscription;

    protected override async Task OnInitializedAsync()
    {
        _hmiTagPackage = await Http.GetFromJsonAsync<HmiTagPackage>($"api/model/tag");
        // TagWebORM[] allTags = allTagWebs.Select(tw => new TagWebORM(tw)).ToArray();
        // _items = new ObservableCollection<TagWebORM>(allTags);

        // _hubConnection = await NavigationManager.ToAbsoluteUri("/hub/vanilla").StartHubAsync();
        // _subscription =
        //     _hubConnection.On<TableHistory>("TableRowChanged", async (TableHistory change) =>
        //     {
        //         Console.WriteLine($"TableRowsAdded notification received with {change.Name}/{change.Operation}.  waiting for {_tableName}");
        //         if (!change.Name.EqualsIgnoringCase(_tableName))
        //         {
        //             Console.WriteLine($"Ignoring notification for {change.Name} != {_tableName}");
        //             return;
        //         }

        //         await getAllItemsAsync();

        //         // Page 다시 로딩 되기 이전에, 약간의 delay 를 주어서 getItemAsync() 결과를 받을 수 있도록 보장???
        //         // `The connection to ws://localhost:50294/TwmApp.Server/ was interrupted while the page was loading.`
        //         await Task.Delay(200);
        //         StateHasChanged();
        //     });

        // await getAllItemsAsync();
        _loading = false;
        await base.OnInitializedAsync();
    }

    // async Task backupOnceAsync(object oAssetId)
    // {
    //     int assetId = (int)oAssetId;
    //     Console.WriteLine($"Requesting backup once for assetId: {assetId}");

    //     _loading = true;
    //     var reply = await Http.GetFromJsonAsync<AmDxbS2CReplyBackupOnce>($"api/DexaProxy/backupOnce/{assetId}");
    //     _loading = false;
    //     if (reply.Succeeded)
    //         await JsDual.Confirm($"Got OK backup result.\r\nCheck details");
    //     else
    //         await JsDual.Alert($"Got NG backup result.\r\n{reply.ErrorMessage}");
    // }
}