---
name: ds
comment: DS language syntax.  Do *NOT* modify auto-generated tmLanguage file.
scopeName: source.ds
fileTypes: [ds]
# foldingStartMarker: '\{\s*$'
# foldingStopMarker: '^\s*\}'

# foldingStartMarker: '^\s*[{\[\`](?!.*[}\]\`],?\s*$)|[{\[\`]\s*$'
# foldingStopMarker: '^\s*[}\]\`]'

# 원본 참조
# https://github.com/inkle/ink-tmlanguage/blob/master/grammars/Ink.YAML-tmLanguage

variables:
  startOfIdentifier: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))
  endOfIdentifier: (?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))
  startofBracket: (\[\s*)
  endofBracket: (\s*\])
  whitespace: '[^\S\n\r]'

  compo: '(?:[^\\\s\.;{{punctuation}}{{whitespace}}])+'
  # [가-힣\w\d]
  identifier1: '{{compo}}'
  identifier2: '{{compo}}\.{{compo}}'
  identifier3: '{{compo}}\.{{compo}}\.{{compo}}'
  identifier4: '{{compo}}\.{{compo}}\.{{compo}}\.{{compo}}'
  identifiers: '{{compo}}|(?:{{compo}}+(?:\.{{compo}})+)'

  button: 'emg_in|emg|auto_in|auto|clear_in|clear|manual_in|manual|stop_in|stop|run_in|run|dryrun_in|dryrun|home_in|home'
  lamp: 'runlamp|dryrunlamp|manuallamp|stoplamp|emglamp'
  blocks: 'a_in|a|m_in|m|d_in|d|s_in|s|c_in|c|e_in|e|t_in|t|h_in|h|r_in|r'
  varType: 'int|word|float|dword'
  types: '(system|sys|device|prop|external|safety|layouts|flow|aliases|variables|jobs|interfaces|buttons|lamps|conditions|{{lamp}}|{{button}}|{{blocks}})'
  punctuation: '((<\|\|>)|(<\|)|(\|>)|<|>|!|~|,|(:=)|=|(=>)|(<=)|(\|\|)|(\&\&))'
  configs: '(ip|host|file)'
  
  buttonHeader: '\[\s*(?:{{button}})\s*\]'
  lampHeader: '\[\s*(?:{{lamp}})\s*\]'

  fliepath: 'file\s*=\s*(?:{{identifiers}})'


  #codeblock's dollor identifiers, etc
  codeblock: '(<@\{|\}@>)'
  dollar: '(?<=\$){{identifiers}}'


  
# Before we dive into the meat, a bit of syntax to remember:
#
# (?<=): Positive lookbehind, non capturing unless it's within a group
# (?<!): Negative lookbehind, non capturing unless it's within a group
# (?=): Positive lookahead, non capturing unless it's within a group
# (?!): Negative lookahead, non capturing unless it's within a group
# (?:): Non capturing group
# (?x): Ignore subsequent spaces (useful for multiline-formatted regex)
#
# >-: YAML multi-line string, turning line breaks into spaces

patterns:
- include: '#comments'
- include: '#invalid'
- include: '#variableDef'
- include: '#header'
- include: '#headerConfigs'
- include: '#codeblocks'
- include: '#punctuation'
- include: '#segment'

repository:
  
  invalid:
    name: invalid.illegal.expected-array-separator.ds
    match: (\|\|\|+)|(<<<+)|(>>>+)

  header:
    name: variable.other.squarebracket.gate.ds
    begin: \[
    beginCaptures:
      '0': {name: punctuation.brace.header.gate.begin.ds}
    end: \]
    endCaptures:
      '0': {name: punctuation.brace.header.gate.end.ds}
    patterns:
    - include: '#headerConfigs'

  headerConfigs:
    patterns:
    - name: storage.modifier.header.config.type.ds
      match: '(?<=\[)\b{{types}}\b'
    - name: support.type.header.config.path.ds
      match: '\b(?<!\=\s*){{configs}}\b'

  variableType:
    name: storage.modifier.variable.type.ds
    match: '{{varType}}'

  variableDef:
    name: entity.other.definition.ds
    begin: \(
    beginCaptures:
      '0': {name: punctuation.brace.definition.begin.ds}
    end: \)
    endCaptures:
      '0': {name: punctuation.brace.definition.end.ds}
    patterns:
    - include: '#variableType'
    - include: '#punctuation'
    - include: '#segment'

  punctuation:
    name: keyword.other.accessor.ds
    match: '({{punctuation}})'

  comments: # Inline (//) and block (/* */) comments. Comments can happen anywhere.
    patterns:
    - name: comment.block.ds
      begin: (/\*)
      beginCaptures:
        '1': { name: 'punctuation.definition.comment.ds' }
      end: (\*/)
      endCaptures:
        '1': { name: 'punctuation.definition.comment.ds' }
    - name: comment.line.ds
      begin: (\/\/)
      beginCaptures:
        '1': { name: 'punctuation.definition.comment.ds' }
      end: (?=$)
  
  codeblocks: 
    patterns:
    - name: 'keyword.control.header.bracket.codeblocks.ds'
      match: '{{codeblock}}'

  segment:
    patterns:
    - name: 'support.function.code.ds'
      match: '\$'
    - name: 'entity.name.segment.withdot.ds'
      match: '{{identifiers}}'
    - name: 'entity.name.segment.ds'
      match: '{{identifier1}}'
    - include: '#comments'
    - name: punctuation.separator.array.ds
      match: ";"

...
