@* CompShowHide *@

<div id="@_tooltipDivId" class="@CssClass">
    @ChildContent
</div>

@code {
    string _tooltipDivId;
    [Parameter] public RenderFragment ChildContent { get; set; }
    [Parameter] public bool UseSpan { get; set; } = false;
    [Parameter] public bool ShowOnInit { get; set; } = false;
    [Parameter] public string CssClass { get; set; }

    public bool IsVisible { get; set; }

    override protected void OnInitialized()
    {
        IsVisible = ShowOnInit;
        _tooltipDivId = $"tooltip-{Guid.NewGuid().ToString()}";
    }

    public async Task Show()
    {
        await JsDual.SetDivDisplay(_tooltipDivId, UseSpan ? "inline-block" : "block");
        // await JsRuntime.InvokeVoidAsync("setDivDisplay", new object[] { _tooltipDivId, UseSpan ? "inline-block" : "block" });
        IsVisible = true;
    }

    public async Task Hide()
    {
        await JsDual.SetDivDisplay(_tooltipDivId, "none");
        // await JsRuntime.InvokeVoidAsync("setDivDisplay", new object[] { _tooltipDivId, "none" });
        IsVisible = false;
    }

    public async Task Toggle()
    {
        IsVisible = !IsVisible;
        if (IsVisible)
            await Show();
        else
            await Hide();
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !ShowOnInit)
            await Hide();
    }
}
