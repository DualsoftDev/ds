// Copyright (c) Dualsoft  All Rights Reserved.
namespace Engine.Core

open System.Collections.Generic
open System
open System.Linq

[<AutoOpen>]
module Interface =

    // Basic interfaces
    [<AllowNullLiteral>]
    type IVertex = interface end

    type INamed  =
        abstract Name: string with get, set

    type IText  =
        abstract ToText: unit -> string

    type IType =
        abstract DataType : System.Type


    type IValue =
        abstract ObjValue: obj with get  // Renamed from 'BoxedValue' to avoid confusion

    // Extended interfaces
    type IQualifiedNamed =
        inherit INamed
        abstract QualifiedName: string with get
        abstract DequotedQualifiedName: string with get
        abstract NameComponents: string[] with get

    type IStorage =
        inherit IValue
        inherit INamed
        inherit IText
        inherit IType
        inherit IComparable
        abstract Address: string with get, set
        abstract DsSystem: ISystem
        abstract Target: IQualifiedNamed option
        abstract TagKind: int
        abstract TagChanged: bool with get, set
        abstract BoxedValue: obj with get, set
        abstract IsGlobal: bool with get, set
        abstract IsAutoGenerated: bool with get, set
        abstract Comment: string with get, set
        abstract ToBoxedExpression: unit -> obj

    and ISystem =
        inherit IVertex

    type ITerminal =
        abstract Variable: IStorage option
        abstract Literal: IExpressionizableTerminal option

    and IExpressionizableTerminal =
        inherit IText
        inherit IType
        inherit ITerminal

    // Collections and Managers
    type Storages() =
        inherit Dictionary<string, IStorage>(StringComparer.OrdinalIgnoreCase)

    type ITagManager =
        abstract Target: IQualifiedNamed
        abstract Storages: Storages

    // Utilities
    let inline address x = ( ^T: (member Address: string) x )
