@using DsWebApp.Client.Pages.Hmis.Widget
@using Engine.Core
@using System.Reactive.Subjects

@inherits CompHmiTagManager
@implements IAsyncDisposable

@if (_loading)
{
    <p><em>Loading...</em></p>
}
else
{
    <DxGrid Data="Flows" @ref="MyGrid">
        <Columns>
            @* <DxGridDataColumn FieldName="Name" Caption="Flow"></DxGridDataColumn> *@
            <DxGridCommandColumn Caption="Flow">
                <HeaderTemplate>Flow</HeaderTemplate>
                <CellDisplayTemplate>
                    <DxButton Click="() => onFlow(context.DataItem)"
                              Text="@(((HMIFlow)context.DataItem).Name)"
                              RenderStyle="ButtonRenderStyle.Info" />
                </CellDisplayTemplate>
            </DxGridCommandColumn>
            <DxGridCommandColumn Caption="Auto/Manual">
                <HeaderTemplate>
                    Auto/Manual
                </HeaderTemplate>
                <CellDisplayTemplate>
                    <CompHmiWidgetAutoManualSelectorPushButton
                        TagAuto="(((HMIFlow)context.DataItem).GetAuto())"
                        TagManual="(((HMIFlow)context.DataItem).GetManual())"
                        TagChangedObservable="@_tagWebChanged"
                        FlowName="@(((HMIFlow)context.DataItem).Name)"
                        />

                    @*                     @{
                <DxButton Click="() => onAuto(context.DataItem)" Text="Auto" IconCssClass="" />
                // <DxButton Click="() => onManual(context.DataItem)" Text="Manual" IconCssClass="oi oi-check" />
                <CompHmiWidgetPushButton Tag="(((HMIFlow)context.DataItem).GetManual())" Click="() => onManual(context.DataItem)" Text="Manual" />
                }
                *@

                </CellDisplayTemplate>
            </DxGridCommandColumn>

            <CompHmiButtonColumn Caption="Drive"    TagChangedObservable="@_tagWebChanged" TagGetter="@((dataItem) =>((HMIFlow)dataItem).DrivePush)" />
            <CompHmiButtonColumn Caption="Stop"     TagChangedObservable="@_tagWebChanged" TagGetter="@((dataItem) =>((HMIFlow)dataItem).StopPush)" />
            <CompHmiButtonColumn Caption="Clear"    TagChangedObservable="@_tagWebChanged" TagGetter="@((dataItem) =>((HMIFlow)dataItem).ClearPush)" />
            <CompHmiButtonColumn Caption="Em. Stop" TagChangedObservable="@_tagWebChanged" TagGetter="@((dataItem) =>((HMIFlow)dataItem).EmergencyPush)" ForceWidth=100 />
            <CompHmiButtonColumn Caption="Test"     TagChangedObservable="@_tagWebChanged" TagGetter="@((dataItem) =>((HMIFlow)dataItem).TestPush)" />
            <CompHmiButtonColumn Caption="Home"     TagChangedObservable="@_tagWebChanged" TagGetter="@((dataItem) =>((HMIFlow)dataItem).HomePush)" />
            <CompHmiButtonColumn Caption="Ready"    TagChangedObservable="@_tagWebChanged" TagGetter="@((dataItem) =>((HMIFlow)dataItem).ReadyPush)" />

        </Columns>
    </DxGrid>
}

@code {
    IGrid MyGrid { get; set; }
    bool _loading { get; set; } = true;
    [Parameter] public HMIFlow[] Flows { get; set; }



    protected override async Task OnInitializedAsync()
    {
        base.ComponentName = "CompHmiFlowTable.razor";
        await base.OnInitializedAsync();
        _loading = false;
    }


    void onFlow(object dataItem)
    {
        var flow = (HMIFlow)dataItem;
        var name = flow.Name;
        NavigationManager.NavigateTo($"hmis/flow/{name}");
    }


    async Task onAuto(object dataItem)
    {
        var flow = (HMIFlow)dataItem;
        await PostTag(flow.GetAuto(), true);
    }

    async Task onManual(object dataItem)
    {
        var flow = (HMIFlow)dataItem;
        await PostTag(flow.GetManual(), true);
    }
}



