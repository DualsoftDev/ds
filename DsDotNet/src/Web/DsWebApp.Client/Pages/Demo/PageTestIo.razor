@page "/demo/testio"

@using Dual.Web.Blazor.ServerSide
@using IO.Core
@implements IAsyncDisposable

<h3>PageTestIo</h3>

@code {
    HubConnectionManager _hubConnectionManager;
    protected override async Task OnInitializedAsync()
    {
        HubConnection hubConnection = await NavigationManager.ToAbsoluteUri("/hub/io").StartHubAsync();
        _hubConnectionManager = new HubConnectionManager(hubConnection, registerHubConnection);

        Console.WriteLine($"Hub initialized on PageHmiTagTest.razor");
        await base.OnInitializedAsync();

        IDisposable registerHubConnection(HubConnection hubConnection)
        {
            CompositeDisposable disposables = new();
            IDisposable subscription =
                hubConnection.On<SimpleNumericIOChangeInfo>(SK.S2CNNIOChanged, (changeInfo) =>
                {
                    var numItems = changeInfo.Offsets.Length;
                    JsDual.Debug($"IoMemoryChanged: {changeInfo.MemoryName}, ContentBitLength={changeInfo.ContentBitLength}, Num changed items: {numItems}");
                    StateHasChanged();
                });
            disposables.Add(subscription);

            subscription =
                hubConnection.On<SimpleSingleStringChangeInfo>(SK.S2CNSIOChanged, (changeInfo) =>
                {
                    JsDual.Debug($"{SK.S2CNSIOChanged}: {changeInfo.Tag} = {changeInfo.Value}");
                    StateHasChanged();
                });
            disposables.Add(subscription);

            return disposables;
        }
    }

    public async ValueTask DisposeAsync()
    {
        await _hubConnectionManager.DisposeAsync();
        Console.WriteLine("PageTestIo.razor disposed!");
    }
}
