@* CompHmiFlowTable *@

@using Engine.Core
@using System.Reactive.Subjects

@inherits CompHmiTagManager
@implements IAsyncDisposable

@if (_loading)
{
    <p><em>Loading...</em></p>
}
else
{
    <DxGrid Data="Flows" @ref="MyGrid" CustomizeElement="customizeElement">
        <Columns>
            @* <DxGridDataColumn FieldName="Name" Caption="Flow"></DxGridDataColumn> *@
            <DxGridCommandColumn Caption="Flow">
                <HeaderTemplate>Flow</HeaderTemplate>
                <CellDisplayTemplate>
                    <DxButton Click="() => onFlow(context.DataItem)"
                              Text="@(((HMIFlow)context.DataItem).Name)"
                              RenderStyle="ButtonRenderStyle.Info" />
                </CellDisplayTemplate>
            </DxGridCommandColumn>
@* 
            <DxGridCommandColumn Caption="Auto/Manual">
                <HeaderTemplate>
                    Auto/Manual
                </HeaderTemplate>
                <CellDisplayTemplate>
                    <WgtAutoManualSelectorPb
                        TagAuto="(((HMIFlow)context.DataItem).GetAuto())"
                        TagManual="(((HMIFlow)context.DataItem).GetManual())"
                        FlowName="@(((HMIFlow)context.DataItem).Name)"
                        />
                </CellDisplayTemplate>
            </DxGridCommandColumn>
 *@
            <CompHmiButtonLampModeColumn Caption="Auto"     ButtonLampModeGetter="@((dataItem) =>((HMIFlow)dataItem).AutoManualSelectLampMode.Item1)" />
            <CompHmiButtonLampModeColumn Caption="Manual"   ButtonLampModeGetter="@((dataItem) =>((HMIFlow)dataItem).AutoManualSelectLampMode.Item2)" />

            <CompHmiButtonLampModeColumn Caption="Drive"    ButtonLampModeGetter="@((dataItem) =>((HMIFlow)dataItem).DrivePushLampMode)" />
            <CompHmiButtonLampModeColumn Caption="Stop"     ButtonLampModeGetter="@((dataItem) =>((HMIFlow)dataItem).StopPushLampMode)" />
            <CompHmiButtonLampColumn     Caption="Clear"        ButtonLampGetter="@((dataItem) =>((HMIFlow)dataItem).ClearPushLamp)" />
            <CompHmiButtonLampModeColumn Caption="Em.Stop"  ButtonLampModeGetter="@((dataItem) =>((HMIFlow)dataItem).EmergencyPushLampMode)" ForceWidth=120 />
            <CompHmiButtonLampModeColumn Caption="Test"     ButtonLampModeGetter="@((dataItem) =>((HMIFlow)dataItem).TestPushLampMode)" />
            <CompHmiButtonLampColumn     Caption="Home"         ButtonLampGetter="@((dataItem) =>((HMIFlow)dataItem).HomePushLamp)" />
            <CompHmiButtonLampModeColumn Caption="Ready"    ButtonLampModeGetter="@((dataItem) =>((HMIFlow)dataItem).ReadyPushLampMode)" />

        </Columns>
    </DxGrid>
}

<style>
    .tall-row {
        height: 100px;
    }
</style>

@code {
    IGrid MyGrid { get; set; }
    bool _loading { get; set; } = true;
    [Parameter] public HMIFlow[] Flows { get; set; }



    protected override async Task OnInitializedAsync()
    {
        base.ComponentName = "CompHmiFlowTable.razor";
        await base.OnInitializedAsync();
        _loading = false;
    }


    void onFlow(object dataItem)
    {
        var flow = (HMIFlow)dataItem;
        var name = flow.Name;
        NavigationManager.NavigateTo($"hmis/flow/{name}");
    }


    async Task onAuto(object dataItem)
    {
        var flow = (HMIFlow)dataItem;
        await PostTag(flow.GetAuto(), true);
    }

    async Task onManual(object dataItem)
    {
        var flow = (HMIFlow)dataItem;
        await PostTag(flow.GetManual(), true);
    }

    // https://docs.devexpress.com/Blazor/DevExpress.Blazor.DxGrid.CustomizeElement?utm_source=SupportCenter&utm_medium=website&utm_campaign=docs-feedback&utm_content=T1059635
    void customizeElement(GridCustomizeElementEventArgs e)
    {
        if (e.ElementType == GridElementType.DataRow)
            e.CssClass = "tall-row";
    }
}



