---
name: ds
comment: DS language syntax.  Do *NOT* modify auto-generated tmLanguage file.
scopeName: source.ds
fileTypes: [ds]
# foldingStartMarker: '\{\s*$'
# foldingStopMarker: '^\s*\}'

# foldingStartMarker: '^\s*[{\[\`](?!.*[}\]\`],?\s*$)|[{\[\`]\s*$'
# foldingStopMarker: '^\s*[}\]\`]'

# 원본 참조
# https://github.com/inkle/ink-tmlanguage/blob/master/grammars/Ink.YAML-tmLanguage

variables:
  compo: '(?:[^\\\s][^\\\s]*)'
  words: '[가-힣a-zA-Z_][가-힣a-zA-Z_0-9]*'
  identifier1: '{{compo}}'
  identifier2: '{{compo}}\.{{compo}}'
  identifier3: '{{compo}}\.{{compo}}\.{{compo}}'
  identifier4: '{{compo}}\.{{compo}}\.{{compo}}\.{{compo}}'
  identifiers: '{{compo}}\.{{compo}}*'
  
  #System
  ipSpec: '(?:ip|host)\s*=\s*(?:{{identifier1}})}*'
  systemHeader: '(\[\s*sys\s*({{ipSpec}})*\s*\])\s*({{identifier1}})\s*=\s*'

  #flow
  flowHeader: '(\[\s*flow\s*\])\s*({{identifier1}})\s*(=)\s*'

  #parents
  parentHeader: '({{identifier1}})\s*=\s*'

  #aliases
  aliasHeader: '(\[\s*aliases\s*\])\s*=\s*'

# Before we dive into the meat, a bit of syntax to remember:
#
# (?<=): Positive lookbehind, non capturing unless it's within a group
# (?<!): Negative lookbehind, non capturing unless it's within a group
# (?=): Positive lookahead, non capturing unless it's within a group
# (?!): Negative lookahead, non capturing unless it's within a group
# (?:): Non capturing group
# (?x): Ignore subsequent spaces (useful for multiline-formatted regex)
#
# >-: YAML multi-line string, turning line breaks into spaces

patterns:
- include: '#comments'
- include: '#systems'
# - include: '#segment'



repository:
  comments: # Inline (//) and block (/* */) comments. Comments can happen anywhere.
    patterns:
    - name: comment.block.ds
      begin: (/\*)
      beginCaptures:
        '1': { name: 'punctuation.definition.comment.ds' }
      end: (\*/)
      endCaptures:
        '1': { name: 'punctuation.definition.comment.ds' }
    - name: comment.line.ds
      begin: (\/\/)
      beginCaptures:
        '1': { name: 'punctuation.definition.comment.ds' }
      end: (?=$)

  systems:
    patterns:
      - comment: system-multi-line
        name: system.multi.ds
        begin: '{{systemHeader}}(\{)(?=[^\}]*$)'
        beginCaptures:
          '1': {name: entity.name.type.system.header.ds}
          '2': {name: entity.name.tag.ip.spec.ds}
          '3': {name: entity.name.variable.system.name.ds}
          '4': {name: punctuation.brace.system.start.ds}
        end: (^\s*\})
        endCaptures:
          '1': {name: punctuation.brace.system.end.ds}
        patterns:             
          - include: '#comments'
          - include: '#flows'
          - include: '#jobs'
           
      - comment: system-single-line
        name: system.single.ds
        begin: '{{systemHeader}}(\{)'
        beginCaptures:
          '1': {name: entity.name.type.system.header.ds}
          '2': {name: entity.name.tag.ip.spec.ds}
          '3': {name: entity.name.variable.system.name.ds}
          '4': {name: punctuation.brace.system.start.ds}
        end: (\})
        endCaptures:
          '1': {name: punctuation.brace.system.end.ds}
        patterns:          
          - name: punctuation.separator.array.ds
            match: ";"
          - name: invalid.illegal.expected-array-separator.json
            match: '[^\s\}]'
          - include: '#comments'
          - include: '#flows'
          - include: '#jobs'

  flows:
    patterns:
      - comment: flow-multi-line
        name: flow.multi.ds
        begin: '{{flowHeader}}(\{)(?=[^\}]*$)'
        beginCaptures:
          '1': {name: entity.name.type.flow.header.ds}
          '2': {name: entity.name.variable.flow.name.ds}
          '3': {name: entity.name.type.flow.equal.ds}
          '4': {name: punctuation.brace.flow.start.ds}
        end: (^\s*\})
        endCaptures:
          '1': {name: punctuation.brace.flow.end.ds}
        patterns:
        - include: '#comments'
        - include: '#aliases'
        - include: '#parents'
        - include: '#causals'
        - include: '#segment'
      - comment: flow-single-line
        name: flow.single.ds
        begin: '{{flowHeader}}\{'
        beginCaptures:
          '1': {name: entity.name.type.flow.header.ds}
          '2': {name: entity.name.variable.flow.name.ds}
        end: \}
        endCaptures:
          '1': {name: punctuation.brace.end.ds}
        patterns:          
        - name: punctuation.separator.array.ds
          match: ";"
        - name: invalid.illegal.expected-array-separator.json
          match: '[^\s\}]' 

  aliases:
    patterns:
      - comment: aliases-multi-line
        name: aliase.multi.ds
        begin: '{{aliasHeader}}(\{)(?=[^\}]*$)'
        beginCaptures:
          '1': {name: entity.name.type.aliase.header.ds}
          '2': {name: punctuation.brace.aliase.start.ds}
        end: (^\s*\})
        endCaptures:
          '1': {name: punctuation.brace.flow.end.ds}
        patterns:
        - include: '#comments'
        - include: '#causals'
        - include: '#segment'
      - comment: aliases-single-line
        name: aliase.single.ds
        begin: '{{aliasHeader}}\{'
        beginCaptures:
          '1': {name: entity.name.type.aliase.header.ds}
        end: \}
        endCaptures:
          '1': {name: punctuation.brace.end.ds}
        patterns:          
        - name: punctuation.separator.array.ds
          match: ";"
        - name: invalid.illegal.expected-array-separator.json
          match: '[^\s\}]'

  parents:
    patterns:
      - comment: parents-multi-line
        name: parent.multi.ds
        begin: '{{parentHeader}}(\{)(?=[^\}]*$)'
        beginCaptures:
          '1': {name: entity.name.variable.parent.name.ds}
          '2': {name: punctuation.brace.parent.start.ds}
        end: (^\s*\})
        endCaptures:
          '1': {name: punctuation.brace.flow.end.ds}
        patterns:
        - include: '#comments'
        - include: '#causals'
        - include: '#segment'
      - comment: parents-single-line
        name: parent.single.ds
        begin: '{{parentHeader}}\{'
        beginCaptures:
          '1': {name: entity.name.variable.parent.name.ds}
          '2': {name: entity.name.variable.parent.name.ds}
        end: \}
        endCaptures:
          '1': {name: punctuation.brace.end.ds}
        patterns:          
        - name: punctuation.separator.array.ds
          match: ";"
        - name: invalid.illegal.expected-array-separator.json
          match: '[^\s\}]'
        - include: '#comments'
        - include: '#causals'
        - include: '#segment'

  jobs:
    patterns:
      - comment: jobs-multi-line
        name: jobs.multi.ds
        begin: (\[\s*jobs\s*\])\s*(=)\s*(\{)(?=[^\}]*$)
        beginCaptures:
          '1': {name: entity.name.type.jobs.header.ds}
        end: (^\s*\})
        endCaptures:
          '1': {name: punctuation.brace.end.ds}
        patterns:
        - include: '#comments'
        - include: '#parents'

      - comment: jobs-single-line
        name: jobs.single.ds
        begin: (\[\s*jobs\s*\])\s*(=)\s*\{
        beginCaptures:
          '1': {name: entity.name.type.jobs.header.ds}
        end: \}
        endCaptures:
          '1': {name: punctuation.brace.end.ds}
        patterns:          
        - name: punctuation.separator.array.ds
          match: ";"
        - name: invalid.illegal.expected-array-separator.json
          match: '[^\s\}]'


  causals:
    patterns:
      - name: punctuation.andmark.ds
        match: ','
      - name: punctuation.ormark.ds
        match: '\?'
      - name: invalid.illegal.expected-array-separator.json
        match: '(<\|>)'   
      - name: keyword.other.causal.ds
        match: '(<\|\|>)|(<\|)|(\|>)|<|>|(=>)|(<=)'


  segment:
    patterns:
    - name: 'variable.other.segment.withdot.ds'
      match: '{{identifiers}}'
    - name: 'variable.other.segment.ds'
      match: '{{identifier1}}'
    - include: '#comments'
    - name: punctuation.separator.array.ds
      match: ";"



  # segments:
  #   - name: meta.structure.segments.array.ds
  #     begin: (\{)
  #     beginCaptures:
  #       '1': { name: 'punctuation.definition.macro.start.ds' }
  #     end: (\})
  #     endCaptures:
  #       '1': { name: 'punctuation.definition.macro.end.ds' } 
  #     patterns:
  #     - name: punctuation.separator.array.ds
  #       match: ";"
  #     - name: invalid.illegal.expected-array-separator.json
  #       match: '[^\s\]]'
  #     - include: '#comments'
  #     - include: '#segment'
  #     - include: '#causals'

  # reals:
  #   - comment: system-multi-line
  #     name: real.single.ds
  #     begin: ([가-힣a-zA-Z_][가-힣a-zA-Z_0-9]* | \"\s*(~(\"|\\|\r|\n)|\\(\"|\\))*\s*\")\s*(=)\s*(\{)(?=[^\}]*$)
  #     beginCaptures:
  #       '1': {name: entity.name.variable.real.name.ds}
  #     end: (^\s*\})
  #     endCaptures:
  #       '1': {name: punctuation.brace.end.ds}
  #     patterns:
  #     - include: '#comments'
  #     - include: '#segment'
  #     - include: '#segments'
  #     - include: '#causals'

  #   - comment: flow-single-line
  #     name: flow.single.ds
  #     begin: ([가-힣a-zA-Z_][가-힣a-zA-Z_0-9]* | \"\s*(~(\"|\\|\r|\n)|\\(\"|\\))*\s*\")\s*(=)\s*\{
  #     beginCaptures:
  #       '1': {name: entity.name.variable.real.name.ds}
  #     end: \}
  #     endCaptures:
  #       '1': {name: punctuation.brace.end.ds}
  #     patterns:          
  #     - name: punctuation.separator.array.ds
  #       match: ";"
  #     - name: invalid.illegal.expected-array-separator.json
  #       match: '[^\s\}]' 
    # - name: invalid.illegal.expected-array-separator.json
    # match: '[^\s\{\};=<>\|&~\(\)]'
...
