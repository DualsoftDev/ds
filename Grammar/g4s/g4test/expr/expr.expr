/* grun expr toplevels -gui < g4test/expr/expr.expr */
$n0 := add($n1, $n2) > 3;


ppulse($a) := $b;

$qx := $ix && ! $ix && rising($ix) && falling($ix);

$myCTR.RST := $cd;




$myBit17 :=
    $myBit00 &&
    $myBit01 &&
    $myBit02 &&
    $myBit03 &&
    $myBit04 &&
    $myBit05 &&
    $myBit06 &&
    $myBit07 &&
    $myBit10 &&
    $myBit11 &&
    $myBit12 &&
    $myBit13 &&
    $myBit14 &&
    $myBit15 &&
    $myBit16
    ;




copyIf(true, 10, $tag1);        // statement.  not expression

bool myBit1 = createTag("%IX0.0.0", false);
$myBit1 := true;
int8 myByte = createTag(0y);

ton mytimer = createTON($cond1 || $cond2, 1000us);


// on delay timer
ton mytimer = createTON(false, 1000us);

ctu myCounter = createCTU(false, 100us);

(bool)(0 && true) = false;

(bool)0 && true = false;
(int)32u;

toUInt16(false) = 0us;
toInt(false) = 0;

toBool(3.0) = true;

!true = false;

false && true = false;
true;
false;
true && false;

2 + 3 * 4;
8uy &&& 255uy = 8uy;
-3;
1 >>> 2;

~~~ 0u;

int8 myByte = 0y;
int16 myShort = 0uy;
int32 myInt = 0;
int64 myLong = 0L;
float32 myFloat = 0.0f;
float64 myDouble = 0.0;


double d0 = sin(0);

(1 + 1) * 2 = 4;

Int(3.4);

+(1, 2, 3);
abs($tag3);

$myvar := Int(3.4) + 1 + 2 + (abs($tag3));

/* variable declaration */
//....


"hello, " + "world";

/* assign statements : target := expression */
$mytag := $tag1 && $tag2;
$tag3 := 3
$myvar := Int(3.4) + 1 + 2 + (abs($tag3));

/* expression */
hello((1 + 2) * 3, sin(1), array[3][2][g(2)], myvar);

a = b;

-a;
2 + 3;
%tag + 2;
//% tag + 2;      // illegal: % space

