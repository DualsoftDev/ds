@* https://jsfiddle.net/vr2Lpz8y/ *@

@page "/dashboards/log-gantt-jschart"
@using Dual.Web.Blazor.Client.Components.Chart
@using static Engine.Info.DBLoggerAnalysisDTOModule
@using FlatSpans = System.Tuple<string, Engine.Info.DBLoggerAnalysisDTOModule.Span[]>[];

<h3>PageLogGantt_JsChart</h3>




@if (_backupData == null)
{
    <LoadingSpinner />
}
else
{
    <div style="height:300px;">
        <canvas id=@_chartCanvasId></canvas>
        <CompChartJs ChartType="timeline" CanvasId=@_chartCanvasId
                     Data="_backupData" Options="_backupOptions" />
    </div>
}




@code {
    object _backupData, _backupOptions;
    string _chartCanvasId = "myBackupCanvas" + Guid.NewGuid().ToString();


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var flatSpans = await Http.GetFromJsonAsync<FlatSpans>("api/info/log-anal-info-flat");

        await JsDual.Eval(CompChartJs.ClickHandlerSnippet);
        //await CompChartJs.InitializeChartJSAsync(JsDual);

        _backupData = new
        {
            labels = flatSpans.Select(s => s.Item1).ToArray(),
            datasets = flatSpans.Select(s =>
            {
                var spans = s.Item2;
                return new
                {
                    label = s.Item1,
                    data = spans.Select(span => new object[] { span.Start, span.End, s.Item1 }).ToArray(),
                    // backgroundColor = ClientK.Blue,
                };
            }).ToArray(),
        };

        // _backupOptions = CompChartJs.CreateStackedBarOptions(enableDataLabel: true);
        _backupOptions = CreateTimelineOptions(enableDataLabel: false);

    }

    static object CreateTimelineOptions(bool enableDataLabel, bool maintainAspectRatio = false)
    {
        return new
        {
            enableDataLabel = enableDataLabel,
            maintainAspectRatio = maintainAspectRatio,
            tooltips = new
            {
                displayColors = true,
                callbacks = new { mode = "x", },
            },
            scales = new
            {
                x = new { stacked = true, },
                y = new { stacked = true, },
            },
            responsive = true,
        };
    }
}
