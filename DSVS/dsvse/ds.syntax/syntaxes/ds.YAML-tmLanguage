---
name: ds
comment: DS language syntax.  Do *NOT* modify auto-generated tmLanguage file.
scopeName: source.ds
fileTypes: [ds]
# foldingStartMarker: '\{\s*$'
# foldingStopMarker: '^\s*\}'

# foldingStartMarker: '^\s*[{\[\`](?!.*[}\]\`],?\s*$)|[{\[\`]\s*$'
# foldingStopMarker: '^\s*[}\]\`]'

# 원본 참조
# https://github.com/inkle/ink-tmlanguage/blob/master/grammars/Ink.YAML-tmLanguage

variables:
  startOfIdentifier: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))
  endOfIdentifier: (?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))
  startofBracket: (\[\s*)
  endofBracket: (\s*\])
  whitespace: '[^\S\n\r]'

  compo: '(?:[^\\\s\.;{{punctuation}}{{whitespace}}])+'
  words: '[가-힣a-zA-Z_][가-힣a-zA-Z_0-9]*'
  # [가-힣\w\d]
  identifier1: '{{compo}}'
  identifier2: '{{compo}}\.{{compo}}'
  identifier3: '{{compo}}\.{{compo}}\.{{compo}}'
  identifier4: '{{compo}}\.{{compo}}\.{{compo}}\.{{compo}}'
  identifiers: '{{compo}}|(?:{{compo}}+(?:\.{{compo}})+)'

  system: 'system|sys'
  external: 'external'
  button: 'emg_in|emg|auto_in|auto|clear_in|clear|manual_in|manual|stop_in|stop|run_in|run|dryrun_in|dryrun|home_in|home'
  lamp: 'runlamp|dryrunlamp|manuallamp|stoplamp|emglamp'
  types: '({{system}}|device|external|jobs|flow|aliases|interfaces|{{lamp}}|{{button}})'

  ipSpec: 'ip|host'
  fileSpec: 'file'
  configs: '({{ipSpec}}|{{fileSpec}})'
  
  address: '{{compo}}|\.'
  ip: '{{ipSpec}}\s*='
  # props: '{{identifier1}}|{{identifier2}}|{{identifier3}}|{{identifier4}}|{{identifiers}}'
  punctuation: '((<\|\|>)|(<\|)|(\|>)|<|>|!|,|;|(:=)|=|(=>)|(<=)|(\|\|)|(\&\&))'
  buttonHeader: '\[\s*(?:{{button}})\s*\]'
  lampHeader: '\[\s*(?:{{lamp}})\s*\]'

  fliepath: 'file\s*=\s*(?:{{identifiers}})'

  systemHeader: '\[\s*({{system}})\s*((?:{{ipSpec}})\s*=\s*({{identifiers}}))?\]\s*({{identifier1}})\s*=\s*'
  deviceHeader: '(?:\[\s*(device)\s*({{fliepath}})?\]\s*)\s*({{identifier1}})'
  flowHeader: '(\[\s*flow\s*\])\s*({{identifier1}})\s*(=)\s*'
  parentHeader: '({{identifier1}})\s*=\s*'
  aliasHeader: '(\[\s*aliases\s*\])\s*=\s*'

  #codeblock's dollor identifiers, etc
  codeblock: '(<@\{|\}@>)'
  dollar: '(?<=\$){{identifiers}}'


  
# Before we dive into the meat, a bit of syntax to remember:
#
# (?<=): Positive lookbehind, non capturing unless it's within a group
# (?<!): Negative lookbehind, non capturing unless it's within a group
# (?=): Positive lookahead, non capturing unless it's within a group
# (?!): Negative lookahead, non capturing unless it's within a group
# (?:): Non capturing group
# (?x): Ignore subsequent spaces (useful for multiline-formatted regex)
#
# >-: YAML multi-line string, turning line breaks into spaces

patterns:
- include: '#comments'
- include: '#header'
- include: '#headerConfigs'
- include: '#codeblocks'
- include: '#punctuation'
- include: '#segment'

repository:

  header:
    name: variable.other.squarebracket.gate.ds
    begin: \[
    beginCaptures:
      '0': {name: punctuation.brace.header.gate.begin.ds}
    end: \]
    endCaptures:
      '0': {name: punctuation.brace.header.gate.end.ds}
    patterns:
    - include: '#headerConfigs'
    # - include: '#value'
    # - name: punctuation.separator.array.json
    #   match: ','
    # - name: invalid.illegal.expected-array-separator.json
    #   match: '[^\s\]]'

  headerConfigs:
    patterns:
    - name: storage.modifier.header.config.type.ds
      match: '(?<=\[){{types}}'
    - name: support.type.header.config.path.ds
      match: '\b(?<!\=\s*){{configs}}\b'

  punctuation:
    name: keyword.other.accessor.ds
    match: '{{startOfIdentifier}}({{punctuation}}){{endOfIdentifier}}'

        
  types:
    patterns:
    - name: support.type.tag.ip.ds
      match: '(?<=({{external}})\b)\s*(({{ipSpec}}))\b'
    - name: support.type.tag.file.ds
      match: '(?<=({{device}})\b)\s*(({{fileSpec}}))\b'
    - name: storage.modifier.withbrackets.ds
      match: '{{startofBracket}}({{types}}){{endofBracket}}'
    - name: storage.modifier.ds
      match: '{{startOfIdentifier}}({{types}}){{endOfIdentifier}}'

  systemType:
    patterns:
    - name: support.type.tag.ip.ds
      match: '(?<=({{system}})\b)\s*(({{ipSpec}}))\b'
    - name: storage.modifier.system.header.ds
      match: '({{system}})\b'

  property:
   name: variable.object.property.ds
   match: '{{startOfIdentifier}}({{identifiers}}){{endOfIdentifier}}' 


  comments: # Inline (//) and block (/* */) comments. Comments can happen anywhere.
    patterns:
    - name: comment.block.ds
      begin: (/\*)
      beginCaptures:
        '1': { name: 'punctuation.definition.comment.ds' }
      end: (\*/)
      endCaptures:
        '1': { name: 'punctuation.definition.comment.ds' }
    - name: comment.line.ds
      begin: (\/\/)
      beginCaptures:
        '1': { name: 'punctuation.definition.comment.ds' }
      end: (?=$)
  
  codeblocks: 
    patterns:
    - name: 'keyword.control.header.bracket.codeblocks.ds'
      match: '{{codeblock}}'
    - name: 'support.function.code.ds'
      match: '\$'

  segment:
    patterns:
    - name: 'entity.name.segment.withdot.ds'
      match: '{{identifiers}}'
    - name: 'entity.name.segment.ds'
      match: '{{identifier1}}'
    - include: '#comments'
    - name: punctuation.separator.array.ds
      match: ";"

...
