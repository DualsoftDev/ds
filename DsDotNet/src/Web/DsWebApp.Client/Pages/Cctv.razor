@page "/cctv"
@using System.Net.WebSockets
@inject IJSRuntime JsRuntime

<h3>CCTV</h3>

   <DxComboBox Data="@ScreensArray"
                @bind-Value="@Screen"
                @bind-Text="@Screen"
                @onselect="@(async () => await GetImageAync())"
                NullText="Select Screen"
                CssClass="cw-240"
                InputId=""
                />

   <DxComboBox Data="@ModesArray"
                @bind-Value="@Mode"
                @bind-Text="@Mode"
                @onselect="@(async () => await GetImageAync())"
                CssClass="cw-240"
                InputId="cbOverview" 
                NullText="Select Mode" 
                />
<!--<DxButton Text="확인" @onclick="@(async () => await GetImageAync())"></DxButton>-->

    <div id="stream-img" style="width:60vw">
        <img src="@imageSource" style="height:100%; width:100%;" />
    </div>


<script>

    window.displayImage = (imageData) => {
        // Blob 객체 생성
        const blob = new Blob([imageData], { type: 'image/jpeg' });

        // Blob URL 생성
        const imgUrl = URL.createObjectURL(blob);

        // 이미지 업데이트
        const imgElement = document.getElementById('stream-img').firstElementChild;
        imgElement.src = imgUrl;
    };

    // 이미지 전체화면으로 변경 이벤트 처리
    const elem = document.getElementById('stream-img');
    elem.addEventListener('click', () => {
        if (elem.requestFullscreen) {
            elem.requestFullscreen();
        } else if (elem.mozRequestFullScreen) { /* Firefox */
            elem.mozRequestFullScreen();
        } else if (elem.webkitRequestFullscreen) {
            elem.webkitRequestFullscreen();
        } else if (elem.msRequestFullscreen) {
            elem.msRequestFullscreen();
        }
    });
</script>


@code {
    [Parameter]
    public string Name { get; set; } = "";
    [Parameter]
    public string[] ModesArray { get; set; } = ["modes"];
    [Parameter]
    public string[] ScreensArray { get; set; } = ["screens"];
    public string Mode { get; set; }
    public string Screen { get; set; }

    public string imageSource { get; set; }

    string clientGuid;

    ClientWebSocket clientWebSocket;

    private async Task GetData()
    {
        //test cctv screens
        var result = await Http.GetResultSimpleAsync<string[]>("/api/streaming/screens");
        result.Iter(
            ok =>
            {
                var screens = ok as string[];
                ScreensArray = screens.ToArray();
                Screen = ScreensArray[0];
                Console.WriteLine($"cctv screens ={string.Join("; ", ScreensArray)}");
                Console.WriteLine($"cctv screen ={Screen}");
            },
        err => JsDual.Alert($"Failed to fetch info for dashboard.  {err}")
        );
        //test cctv
        result = await Http.GetResultSimpleAsync<string[]>("/api/streaming/viewmodes");
        result.Iter(
            ok =>
            {
                var viewmodes = ok as string[];
                Console.WriteLine($"cctv viewmodes ={string.Join("; ", viewmodes)}");
                ModesArray = viewmodes;
                Mode = ModesArray[0];
            },
        err => JsDual.Alert($"Failed to fetch info for dashboard.  {err}")
        );
    }


    protected override async Task OnInitializedAsync()
    {

        clientGuid = this.GetHashCode().ToString();
        await base.OnInitializedAsync();
        await GetData();
        //await GetImageAync();
    }


    string prvScreen;
    string prvMode;
    async Task GetImageAync()
    {
        clientWebSocket = new ClientWebSocket();
        //<<CCTV> localhost:8889 config에서 가져오기로 수정
        var uri = new Uri($"wss://localhost:8889/api/streaming/streamstart?clientGuid={clientGuid}&channel={Screen}&viewmode={Mode}");
        Console.WriteLine($"wss://localhost:8889/api/streaming/streamstart?clientGuid={clientGuid}&channel={Screen}&viewmode={Mode}");
        try
        {
            
            // WebSocket 연결
            await clientWebSocket.ConnectAsync(uri, CancellationToken.None); 
            if (clientWebSocket.State == WebSocketState.Open)
            {
                Console.WriteLine("WebSocket connection established.");

                // 이미지 수신
                await ReceiveWebSocketData(clientWebSocket);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"WebSocket connection error: {ex.Message}");
        }

        async Task ReceiveWebSocketData(ClientWebSocket clientWebSocket)
        {
            try
            {
                byte[] imageData = Array.Empty<byte>();
                byte[] buffer = new byte[1024 * 128];
                while (clientWebSocket.State == WebSocketState.Open)
                {
                    var result = await clientWebSocket.ReceiveAsync(new ArraySegment<byte>(buffer), CancellationToken.None);
                    if (result.MessageType == WebSocketMessageType.Binary)
                    {
                        imageData = AppendBytes(imageData, buffer, result.Count);

                        if (result.EndOfMessage)
                        {
                            // 이미지 업데이트
                            await JsRuntime.InvokeVoidAsync("displayImage", imageData);
                            Console.WriteLine($"이미지 업데이트 {imageData.Length / 1024} kbytes");

                            // 잠시 대기
                            await Task.Delay(10); //   대기

                            imageData = Array.Empty<byte>(); // 이미지 처리 후 버퍼를 초기화합니다.
                        }
                    }
                }
                byte[] AppendBytes(byte[] original, byte[] buffer, int length)
                {
                    byte[] result = new byte[original.Length + length];
                    Buffer.BlockCopy(original, 0, result, 0, original.Length);
                    Buffer.BlockCopy(buffer, 0, result, original.Length, length);
                    return result;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"WebSocket receive error: {ex.Message}");
            }
        }
    }
    
}
