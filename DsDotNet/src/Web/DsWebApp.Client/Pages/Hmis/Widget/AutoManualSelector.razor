@* AutoManualSelector *@
<style>
    .transparent {
        color: transparent;
    }
</style>


@if (!_loading)
{
    <span style="display: flex; align-items: center; justify-content: space-evenly;">
        <span>
            @* mode 가 성립하면, button 외곽에 bolt 표시 : lamp 가 on 되어도 여타 다른 조건이 안 맞으면 mode 가 성립하지 않음. *@
            <span class="@(() => "oi oi-bolt ds-color-primary" + ((bool)autoMode.Value ? "" : " transparent"))" />

            @* lamp 값을 서버로부터 다시 읽은 것을 반영해서 check 표시 *@
            <DxButton Text="Auto"
                      RenderStyleMode="ButtonRenderStyleMode.Outline"
                      IconCssClass="@((bool)autoLamp.Value ? "oi oi-circle-check" : "oi oi-circle-check transparent")"
                      Click="onAutoClick" />
        </span>
        <span>
            <span class="@(() => "oi oi-bolt ds-color-primary" + ((bool)manualMode.Value ? "" : " transparent"))" />
            <DxButton Text="Manual"
                      RenderStyleMode="ButtonRenderStyleMode.Outline"
                      IconCssClass="@((bool)manualLamp.Value ? "oi oi-circle-check" : "oi oi-circle-check transparent")"
                      Click="onManualClick" />
        </span>
    </span>
}

@code {
    bool _loading = true;

    TagWeb autoPushTag { get; set; }
    TagWeb manualPushTag { get; set; }
    TagWeb autoLamp { get; set; }
    TagWeb manualLamp { get; set; }
    TagWeb autoMode { get; set; }
    TagWeb manualMode { get; set; }

    IDisposable _subscription;
    [Parameter] public CsHMISelectLampMode Selector { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var (auto, manual) = (Selector.Item1, Selector.Item2);
        ((autoPushTag, autoLamp), autoMode) = auto;
        ((manualPushTag, manualLamp), manualMode) = manual;

        // Console.WriteLine($"::: Auto push tag: {autoPushTag.Name}");
        // Console.WriteLine($"::: Auto lamp tag: {autoLamp.Name}");
        // Console.WriteLine($"::: Auto mode tag: {autoMode.Name}");
        // Console.WriteLine($"::: Manual push tag: {manualPushTag.Name}");
        // Console.WriteLine($"::: Manual lamp tag: {manualLamp.Name}");
        // Console.WriteLine($"::: Manual mode tag: {manualMode.Name}");

        _subscription =
            ClientGlobal.TagChangedSubject.Subscribe(tag =>
            {
                Console.WriteLine($"::: Detected tag change: {tag.Name} = {tag.Value}({tag.KindDescription})");
                if (tag.IsEqual(autoPushTag))
                    Console.WriteLine($"----------- Detected auto push button change: {autoPushTag.Value}");
                if (tag.IsEqual(manualPushTag))
                    Console.WriteLine($"----------- Detected manual push button change: {manualPushTag.Value}");

                if (tag.IsEqual(autoLamp))
                {
                    autoLamp = tag;
                    Console.WriteLine($"----------- Updating auto lamp: {autoLamp.Value}");
                    StateHasChanged();
                }
                else if (tag.IsEqual(autoMode))
                {
                    autoMode = tag;
                    Console.WriteLine($"----------- Updating auto mode: {autoMode.Value}");
                    StateHasChanged();
                }
                else if (tag.IsEqual(manualLamp))
                {
                    manualLamp = tag;
                    Console.WriteLine($"----------- Updating manual lamp: {manualLamp.Value}");
                    StateHasChanged();
                }
                else if (tag.IsEqual(manualMode))
                {
                    manualMode = tag;
                    Console.WriteLine($"----------- Updating manual mode: {autoMode.Value}");
                    StateHasChanged();
                }
            });


        _loading = false;
    }

    void onError(string err) => JsDual.Alert(err);
    async Task onAutoClick()
    {
        autoPushTag.SetValue(true);
        manualPushTag.SetValue(false);
        await autoPushTag.PostAsync(Http, onError);
        await manualPushTag.PostAsync(Http, onError);
    }


    async Task onManualClick()
    {
        autoPushTag.SetValue(false);
        manualPushTag.SetValue(true);
        await autoPushTag.PostAsync(Http, onError);
        await manualPushTag.PostAsync(Http, onError);
    }
}
