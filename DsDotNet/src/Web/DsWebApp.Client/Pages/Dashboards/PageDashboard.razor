@page "/dashboards/dashboard"
@using static DsWebApp.Client.Pages.Dashboards.DsChartEfficiency
@using static Engine.Core.InfoPackageModule

@implements IAsyncDisposable

<CompTitle Icon="oi oi-puzzle-piece" Title="Dashboard" />

<style>
    .container {
        display: flex;
        width: 100%;
        height: 100vh; /* 뷰포트 높이에 맞게 조절 */
        overflow: auto; /* 필요한 경우 스크롤 표시 */
    }

    .sticky {
        position: sticky;
        left: 0; /* 왼쪽에 고정 */
        top: 0; /* 위쪽에 고정 */
        z-index: 1; /* 다른 콘텐츠 위에 표시 */
        padding: 10px; /* 원하는 여백 설정 */
        width: 50%;
    }

    .non-sticky {
        flex-grow: 1; /* 남은 공간을 모두 채우도록 함 */
        padding: 10px; /* 원하는 여백 설정 */
    }
</style>


@if (_infoSystems == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="container">
        <div class="non-sticky">
            <CompFqdnSelector Systems="_infoSystems" OnItemSelected="@(new Action<IInfoBase>(act => onItemSelected(act)))" />
        </div>

        @if (_pops != null)
        {
            <div class="sticky">
                <DsChartEfficiency PopData="_pops" InnerTitle="@_selected.Name" />
                <DsInfoGridSingle Info="_selected"/>
            </div>
        }
    </div>
}


@code {

    IInfoBase _selected;
    CategoryItem[] _pops;

    InfoSystem[] _infoSystems;
    InfoFlow[] _infoFlows;
    InfoReal[] _infoReals;
    InfoCall[] _infoCalls;
    InfoDevice[] _infoDevices;
    protected HubConnectionManager _hubConnectionManager;
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        HubConnection hubConnection = await NavigationManager.ToAbsoluteUri("/hub/info").StartHubAsync();
        _hubConnectionManager = new HubConnectionManager(hubConnection, registerHubConnection);
        Console.WriteLine($"Hub initialized on PageDashboardGrid.razor");


        IDisposable registerHubConnection(HubConnection hubConnection)
        {
            return hubConnection.On<string>(SK.S2CNInfoChanged, async (string infoSystemStr) =>
            {
                bool initial = _infoSystems == null;
                InfoSystem info = Newtonsoft.Json.JsonConvert.DeserializeObject<InfoSystem>(infoSystemStr);
                _infoSystems = [info];

                _infoFlows = info.InfoFlows.ToArray();
                _infoReals = _infoFlows.SelectMany(f => f.InfoReals).ToArray();
                _infoCalls = _infoReals.SelectMany(r => r.InfoCalls).ToArray();
                _infoDevices = _infoCalls.SelectMany(c => c.InfoDevices).DistinctBy(d => d.Id).ToArray();

                bool changed = false;
                switch (_selected)
                {
                    case null:
                        break;
                    case InfoSystem selSys:
                        if (!info.IsEqual(selSys))
                        {
                            onItemSelected(info);
                            changed = true;
                        }
                        break;
                    case InfoFlow selFlow:
                        var flow = _infoFlows.First(f => f.Fqdn == selFlow.Fqdn);
                        if (!flow.IsEqual(selFlow))
                        {
                            onItemSelected(flow);
                            changed = true;
                        }
                        break;
                    case InfoReal selReal:
                        var real = _infoReals.First(r => r.Fqdn == selReal.Fqdn);
                        if (!real.IsEqual(selReal))
                        {
                            onItemSelected(real);
                            changed = true;
                        }
                        break;

                    case InfoCall selCall:
                        var call = _infoCalls.First(c => c.Fqdn == selCall.Fqdn);
                        if (!call.IsEqual(selCall))
                        {
                            onItemSelected(call);
                            changed = true;
                        }
                        break;
                    case InfoDevice selDevice:
                        var dev = _infoDevices.First(f => f.Fqdn == selDevice.Fqdn);
                        if (!dev.IsEqual(selDevice))
                        {
                            onItemSelected(dev);
                            changed = true;
                        }
                        break;
                }

                if (changed || initial)
                {
                    StateHasChanged();
                    Console.WriteLine($"Info change notification received with {info.Fqdn}.");
                    //ToastService.ShowInfo($"Info change: {info.Fqdn}.");
                }
            });
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnectionManager != null)
        {
            await _hubConnectionManager.DisposeAsync();
            _hubConnectionManager = null;
        }
    }

    Random _random = new Random();
    void onItemSelected(IInfoBase info)
    {
        _selected = info;
        _pops = [
            new CategoryItem() { Category = PieceOfPizzaType.가동 },
            new CategoryItem() { Category = PieceOfPizzaType.비가동 },
            new CategoryItem() { Category = PieceOfPizzaType.에러 },
        ];
        var (가동, 비가동, 에러) = (
                _pops[(int)PieceOfPizzaType.가동],
                _pops[(int)PieceOfPizzaType.비가동],
                _pops[(int)PieceOfPizzaType.에러]);

        switch (info)
        {
            case InfoBase infoBase:
                // 가동.Ratio = _random.Next(10, 90);
                // 에러.Ratio = 100 - 가동.Ratio;
                // // todo: fix ratio
                가동.Ratio = infoBase.DriveAverage;
                에러.Ratio = infoBase.ErrorAverage;
                switch (info)
                {
                    case InfoReal real:
                        비가동.Ratio = real.WaitTime;
                        break;
                    case InfoCall call:
                        break;
                }
                break;

            case InfoDevice device:
                break;

            default:
                Console.Error.WriteLine($"Unknown InfoBase type: {info.GetType().Name}");
                break;
        }

        StateHasChanged();
    }
}
