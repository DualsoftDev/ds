@using Dual.Web.Blazor.ServerSide
@using Engine.Core

@code {
    protected Dictionary<TagFqdn, TagWebORM[]> HmiTagMap = new();

    HubConnection _hubConnection;
    CompositeDisposable _disposables = new();
    protected async Task InitializeMapAsync(IEnumerable<TagWebORM> tagWebs)
    {
        HmiTagMap =
            tagWebs
                .GroupBy(tw => tw.Name) // TagWeb 개체를 Name 속성으로 그룹화
                .ToDictionary(
                    group => group.Key, // Dictionary의 키는 Name
                    group => group.ToArray() // 각 그룹의 TagWeb 개체를 배열로 변환
                );

        _hubConnection = await NavigationManager.ToAbsoluteUri("/hub/hmi/tag").StartHubAsync();
        IDisposable subscription =
            _hubConnection.On<TagWeb>(SK.S2CNTagWebChanged, (TagWeb change) => UpdateOnMatch(change));

        _disposables.Add(subscription);
    }
    public async ValueTask DisposeAsync()
    {
        await _hubConnection.StopAsync();
        _disposables.Dispose();
    }

    public virtual void UpdateStateHasChanged() => throw new Exception("Should be overwridden");
    protected bool UpdateOnMatch(TagWeb tagWeb)
    {
        if (HmiTagMap.TryGetValue(tagWeb.Name, out TagWebORM[] matchContainers))
        {
            TagWebORM match = matchContainers.FirstOrDefault(item => item.Name == tagWeb.Name && item.Kind == tagWeb.Kind && item.Value != tagWeb.Value);
            if (match != null)
            {
                match.Value = tagWeb.Value;
                UpdateStateHasChanged();
                Console.WriteLine($"Updating RealButton {tagWeb.Name}/{tagWeb.Kind}={tagWeb.Value}");
                return true;
            }
        }

        return false;
    }
}
}
