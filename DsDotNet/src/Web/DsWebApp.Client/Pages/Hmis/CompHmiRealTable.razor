@using Engine.Core
@using System.Reactive.Subjects

@inherits CompHmiTagPoster
@implements IAsyncDisposable


@if (_loading)
{
    <p><em>Loading...</em></p>
}
else
{
    // todo : Lamp 표시 (R/G/F/H)
    <DxGrid Data="Reals" @ref="MyGrid">
        <Columns>
            <DxGridDataColumn FieldName="Name" Caption="Real"></DxGridDataColumn>

            <CompHmiButtonColumn ForceWidth=120 Caption="자동시작" OnClick="@onAutoStart" />
            <CompHmiButtonColumn ForceWidth=120 Caption="자동복귀" OnClick="@onAutoHome" />
            <CompHmiButtonColumn ForceWidth=160 Caption="작업완료SET" OnClick="@onCompleteSet" />
            <CompHmiButtonColumn ForceWidth=160 Caption="작업완료RST" OnClick="@onCompleteReset" />

        </Columns>
    </DxGrid>
}

@code {
    IGrid MyGrid { get; set; }
    bool _loading { get; set; } = true;
    [Parameter] public HMIReal[] Reals { get; set; }

    HubConnectionManager _hubConnectionManager;
    Subject<TagWeb> _tagWebChanged = new Subject<TagWeb>();

    protected override async Task OnInitializedAsync()
    {
        HubConnection hubConnection = await NavigationManager.ToAbsoluteUri("/hub/hmi/tag").StartHubAsync();
        _hubConnectionManager = new HubConnectionManager(hubConnection, registerHubConnection);

        Console.WriteLine($"Hub initialized on PageHmiTagTest.razor");
        await base.OnInitializedAsync();

        IDisposable registerHubConnection(HubConnection hubConnection)
        {
            return hubConnection.On<TagWeb>(SK.S2CNTagWebChanged, (TagWeb change) =>
            {
                Console.WriteLine($"TagWeb change notification received with {change.Name}/{change.Kind}={change.Value}.");
                ToastService.ShowInfo($"TagWeb change: {change.Name}/{change.Kind}={change.Value}.");
                _tagWebChanged.OnNext(change);
            });
        }

        _loading = false;
    }
    public async ValueTask DisposeAsync()
    {
        await _hubConnectionManager.DisposeAsync();
        Console.WriteLine("CompHmiRealTable.razor disposed!");
    }


    async Task onAutoStart    (object dataItem) => await PostTag(((HMIReal)dataItem).StartPush);
    async Task onAutoHome     (object dataItem) => await PostTag(((HMIReal)dataItem).ResetPush);
    async Task onCompleteSet  (object dataItem) => await PostTag(((HMIReal)dataItem).ONPush);
    async Task onCompleteReset(object dataItem) => await PostTag(((HMIReal)dataItem).OFFPush);

}



