@page "/unity"
@using Dual.Common.Core
@using Dual.Web.Blazor.Auth
@using System.Text
@using System.Text.Json

<h2 class="pb-2">유니티 webGl 테스트</h2>

<body>
    <div id="unity-container" class="unity-desktop">
        <div class="background-div">
            <img id="img" src="https://dev.dualsoft.co.kr:4430/mjpeg">
            <canvas class="overlay-div" id="unity-canvas" tabindex="-1" style="background: transparent;"></canvas>
        </div>
        <div id="unity-loading-bar">
            <div id="unity-logo"></div>
            <div id="unity-progress-bar-empty">
                <div id="unity-progress-bar-full"></div>
        </div>
      </div>
    </div>
    <script>

      var container = document.querySelector("#unity-container");
      var img = document.querySelector("#img");
      var canvas = document.querySelector("#unity-canvas");
      var loadingBar = document.querySelector("#unity-loading-bar");
      var progressBarFull = document.querySelector("#unity-progress-bar-full");
      var fullscreenButton = document.querySelector("#unity-fullscreen-button");
      var warningBanner = document.querySelector("#unity-warning");

      // Shows a temporary message banner/ribbon for a few seconds, or
      // a permanent error message on top of the canvas if type=='error'.
      // If type=='warning', a yellow highlight color is used.
      // Modify or remove this function to customize the visually presented
      // way that non-critical warnings and error messages are presented to the
      // user.
      function unityShowBanner(msg, type) {
        var div = document.createElement('div');
        div.innerHTML = msg;
        }
      
      var buildUrl = "unity/Build";
      var loaderUrl = buildUrl + "/out.loader.js";
      var config = {
            dataUrl: buildUrl + "/out.data",
            frameworkUrl: buildUrl + "/out.framework.js",
            codeUrl: buildUrl + "/out.wasm",
        streamingAssetsUrl: "StreamingAssets",
        companyName: "DefaultCompany",
        productName: "DsPilotOverlayWeb",
        productVersion: "0.1.0",
        showBanner: unityShowBanner,
      };

      // By default, Unity keeps WebGL canvas render target size matched with
      // the DOM size of the canvas element (scaled by window.devicePixelRatio)
      // Set this to false if you want to decouple this synchronization from
      // happening inside the engine, and you would instead like to size up
      // the canvas DOM size and WebGL render target sizes yourself.
      // config.matchWebGLToCanvasSize = false;

      if (/iPhone|iPad|iPod|Android/i.test(navigator.userAgent)) {
        // Mobile device style: fill the whole browser client area with the game canvas:

        var meta = document.createElement('meta');
        meta.name = 'viewport';
        meta.content = 'width=device-width, height=device-height, initial-scale=1.0, user-scalable=no, shrink-to-fit=yes';
        document.getElementsByTagName('head')[0].appendChild(meta);
        container.className = "unity-mobile";
        canvas.className = "unity-mobile";

        // To lower canvas resolution on mobile devices to gain some
        // performance, uncomment the following line:
        // config.devicePixelRatio = 1;


      } else {
        // Desktop style: Render the game canvas in a window that can be maximized to fullscreen:
          img.style.position = "relative";
          img.style.width = "960px";
          img.style.height = "680px";
          
          canvas.style.position = "absolute";
          canvas.style.background = "transparent";
          canvas.style.indexOf = "10";
          canvas.style.width = "960px";
          canvas.style.height = "680px";
      }

      loadingBar.style.display = "block";

      var script = document.createElement("script");
      script.src = loaderUrl;
      script.onload = () => {
        createUnityInstance(canvas, config, (progress) => {
          progressBarFull.style.width = 100 * progress + "%";
              }).then((unityInstance) => {
                window.unity = unityInstance;
                loadingBar.style.display = "none";
//                fullscreenButton.onclick = () => {
//                  unityInstance.SetFullscreen(1);
//                };
              }).catch((message) => {
                alert(message);
              });
            };

      document.body.appendChild(script);

    </script>
  </body>









 <style>
        .background-div {
            position: relative;
            width: 400px;
            height: 300px;
            background-color: blue;
        }

        .overlay-div {
            position: absolute;
            top: 0;    /* 부모 div의 상단에 정렬 */
            left: 0;   /* 부모 div의 왼쪽에 정렬 */
            bottom: 0; /* 부모 div의 하단에 정렬 */
            right: 0;  /* 부모 div의 오른쪽에 정렬 */
            background: transparent;
            z-index: 10;
        }
    </style>
