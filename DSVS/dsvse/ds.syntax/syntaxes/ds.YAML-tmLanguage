---
name: ds
comment: DS language syntax.  Do *NOT* modify auto-generated tmLanguage file.
scopeName: source.ds
fileTypes: [ds]
# foldingStartMarker: '\{\s*$'
# foldingStopMarker: '^\s*\}'

# foldingStartMarker: '^\s*[{\[\`](?!.*[}\]\`],?\s*$)|[{\[\`]\s*$'
# foldingStopMarker: '^\s*[}\]\`]'

# 원본 참조
# https://github.com/inkle/ink-tmlanguage/blob/master/grammars/Ink.YAML-tmLanguage

variables:
  startOfIdentifier: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))
  endOfIdentifier: (?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))
  startofBracket: (\[\s*)
  endofBracket: (\s*\])

  compo: '(?:[^\\\s\.;|{{punctuation}}])+'
  words: '[가-힣a-zA-Z_][가-힣a-zA-Z_0-9]*'
  identifier1: '{{compo}}'
  identifier2: '{{compo}}\.{{compo}}'
  identifier3: '{{compo}}\.{{compo}}\.{{compo}}'
  identifier4: '{{compo}}\.{{compo}}\.{{compo}}\.{{compo}}'
  identifiers: '{{compo}}(?:\.{{compo}})*'

  system: 'system|sys'
  external: 'external'
  ipSpec: 'ip|host'
  ip: '(?:{{ipSpec}})\s*=\s*{{identifiers}}'
  button: 'emg_in|emg|auto_in|auto|clear_in|clear|manual_in|manual|stop_in|stop|run_in|run|dryrun_in|dryrun|home_in|home'
  lamp: 'runlamp|dryrunlamp|manuallamp|stoplamp|emglamp'
  types: '(device|flow|aliases|{{lamp}}|{{button}})'
  props: '{{identifier1}}|{{identifier2}}|{{identifier3}}|{{identifier4}}|{{identifiers}}'
  punctuation: '[(<\|\|>)(<\|)(\|>)<>,;:=(=>)(<=)(\|\|)(\&\&)]'
  buttonHeader: '\[\s*(?:{{button}})\s*\]'
  lampHeader: '\[\s*(?:{{lamp}})\s*\]'

  fliepath: 'file\s*=\s*(?:{{identifiers}})'

  systemHeader: '\[\s*({{system}})\s*((?:{{ipSpec}})\s*=\s*{{identifier1}})?\]\s*({{identifier1}})\s*=\s*'
  deviceHeader: '(?:\[\s*(device)\s*({{fliepath}})?\]\s*)\s*({{identifier1}})'
  flowHeader: '(\[\s*flow\s*\])\s*({{identifier1}})\s*(=)\s*'
  parentHeader: '({{identifier1}})\s*=\s*'
  aliasHeader: '(\[\s*aliases\s*\])\s*=\s*'

  #codeblock's dollor identifiers, etc
  dollar: '(?<=\$){{identifiers}}'


  
# Before we dive into the meat, a bit of syntax to remember:
#
# (?<=): Positive lookbehind, non capturing unless it's within a group
# (?<!): Negative lookbehind, non capturing unless it's within a group
# (?=): Positive lookahead, non capturing unless it's within a group
# (?!): Negative lookahead, non capturing unless it's within a group
# (?:): Non capturing group
# (?x): Ignore subsequent spaces (useful for multiline-formatted regex)
#
# >-: YAML multi-line string, turning line breaks into spaces

patterns:
- include: '#comments'
- include: '#systems'
- include: '#systmeType'
- include: '#ip'
# - include: '#segment'

repository:
  systmeType:
    patterns:
    - name: storage.modifier.system.text.withbrackets.ds
      match: '{{startofBracket}}({{system}}){{endofBracket}}'
    - name: storage.modifier.system.text.ds
      match: '^\s*({{system}})'

  ip:
    name: entity.name.tag.ip.ds
    match: '(?=>{{system}}){{ip}}'

  types:
    patterns:
    - name: storage.modifier.withbrackets.ds
      match: '{{startofBracket}}({{types}}){{endofBracket}}'
    - name: storage.modifier.ds
      match: '{{startOfIdentifier}}({{types}}){{endOfIdentifier}}'

  property:
   name: variable.object.property.ds
   match: '{{startOfIdentifier}}({{props}}){{endOfIdentifier}}' 

  punctuation:
    name: keyword.other.accessor.ds
    match: '{{startOfIdentifier}}({{punctuation}}){{endOfIdentifier}}'
  comments: # Inline (//) and block (/* */) comments. Comments can happen anywhere.
    patterns:
    - name: comment.block.ds
      begin: (/\*)
      beginCaptures:
        '1': { name: 'punctuation.definition.comment.ds' }
      end: (\*/)
      endCaptures:
        '1': { name: 'punctuation.definition.comment.ds' }
    - name: comment.line.ds
      begin: (\/\/)
      beginCaptures:
        '1': { name: 'punctuation.definition.comment.ds' }
      end: (?=$)

  systems:
    patterns:
      - comment: system-multi-line
        name: system.multi.ds
        begin: '{{systemHeader}}(\{)(?=[^\}]*$)'
        beginCaptures:
          '1': {name: storage.modifier.system.header.ds}
          '2': {name: support.type.tag.ip.spec.ds}
          '3': {name: entity.name.variable.system.name.ds}
          '4': {name: punctuation.brace.system.start.ds}
        end: (^\s*\})
        endCaptures:
          '1': {name: punctuation.brace.system.end.ds}
        patterns:             
          - include: '#comments'
          - include: '#flows'
          - include: '#jobs'
          - include: '#devices'
          - include: '#interfaces'
          - include: '#buttons'
          - include: '#lamps'
          - include: '#codeblocks'
          # - include: '#segment'
          - include: '#types'
          - include: '#punctuation'
          - include: '#property'

      - comment: system-single-line
        name: system.single.ds
        begin: '{{systemHeader}}(\{)'
        beginCaptures:
          '1': {name: storage.modifier.system.header.ds}
          '2': {name: support.type.tag.ip.spec.ds}
          '3': {name: entity.name.variable.system.name.ds}
          '4': {name: punctuation.brace.system.start.ds}
        end: (\})
        endCaptures:
          '1': {name: punctuation.brace.system.end.ds}
        patterns:          
          - name: punctuation.separator.array.ds
            match: ";"
          - name: invalid.illegal.expected-array-separator.json
            match: '[^\s\}]'
          - include: '#comments'
          - include: '#flows'
          - include: '#jobs'
          - include: '#devices'
          - include: '#interfaces'
          - include: '#buttons'
          - include: '#lamps'
          - include: '#codeblocks'
          # - include: '#segment'
          - include: '#types'
          - include: '#punctuation'
          - include: '#property'

  flows:
    patterns:
      - comment: flow-multi-line
        name: flow.multi.ds
        begin: '{{flowHeader}}(\{)(?=[^\}]*$)'
        beginCaptures:
          '1': {name: storage.modifier.flow.header.ds}
          '2': {name: entity.name.variable.flow.name.ds}
          '3': {name: storage.modifier.flow.equal.ds}
          '4': {name: punctuation.brace.flow.start.ds}
        end: (^\s*\})
        endCaptures:
          '1': {name: punctuation.brace.flow.end.ds}
        patterns:
        - include: '#comments'
        - include: '#aliases'
        - include: '#parents'
        - include: '#causals'
        - include: '#segment'
        - include: '#punctuation'
        - include: '#property'
      - comment: flow-single-line
        name: flow.single.ds
        begin: '{{flowHeader}}\{'
        beginCaptures:
          '1': {name: storage.modifier.flow.header.ds}
          '2': {name: entity.name.variable.flow.name.ds}
        end: \}
        endCaptures:
          '1': {name: punctuation.brace.end.ds}
        patterns:          
        - name: punctuation.separator.array.ds
          match: ";"
        - name: invalid.illegal.expected-array-separator.json
          match: '[^\s\}]' 

  aliases:
    patterns:
      - comment: aliases-multi-line
        name: aliase.multi.ds
        begin: '{{aliasHeader}}(\{)(?=[^\}]*$)'
        beginCaptures:
          '1': {name: storage.modifier.aliase.header.ds}
          '2': {name: punctuation.brace.aliase.start.ds}
        end: (^\s*\})
        endCaptures:
          '1': {name: punctuation.brace.flow.end.ds}
        patterns:
        - include: '#comments'
        - include: '#causals'
        - include: '#segment'
      - comment: aliases-single-line
        name: aliase.single.ds
        begin: '{{aliasHeader}}\{'
        beginCaptures:
          '1': {name: storage.modifier.aliase.header.ds}
        end: \}
        endCaptures:
          '1': {name: punctuation.brace.end.ds}
        patterns:          
        - name: punctuation.separator.array.ds
          match: ";"
        - name: invalid.illegal.expected-array-separator.json
          match: '[^\s\}]'

  parents:
    patterns:
      - comment: parents-multi-line
        name: parent.multi.ds
        begin: '{{parentHeader}}(\{)(?=[^\}]*$)'
        beginCaptures:
          '1': {name: entity.name.variable.parent.name.ds}
          '2': {name: punctuation.brace.parent.start.ds}
        end: (^\s*\})
        endCaptures:
          '1': {name: punctuation.brace.flow.end.ds}
        patterns:
        - include: '#comments'
        - include: '#causals'
        - include: '#segment'
        - name: punctuation.separator.array.ds
          match: ";"
        - name: invalid.illegal.expected-array-separator.json
          match: '[^\s\}]'
      - comment: parents-single-line
        name: parent.single.ds
        begin: '{{parentHeader}}\{'
        beginCaptures:
          '1': {name: entity.name.variable.parent.name.ds}
          '2': {name: entity.name.variable.parent.name.ds}
        end: \}
        endCaptures:
          '1': {name: punctuation.brace.end.ds}
        patterns:          
        - include: '#comments'
        - include: '#causals'
        - include: '#segment'
        - name: punctuation.separator.array.ds
          match: ";"
        - name: invalid.illegal.expected-array-separator.json
          match: '[^\s\}]'

  jobs:
    patterns:
      - comment: jobs-multi-line
        name: jobs.multi.ds
        begin: (\[\s*jobs\s*\])\s*(=)\s*(\{)(?=[^\}]*$)
        beginCaptures:
          '1': {name: storage.modifier.jobs.header.ds}
        end: (^\s*\})
        endCaptures:
          '1': {name: punctuation.brace.end.ds}
        patterns:
        - include: '#comments'
        - include: '#parents'

      - comment: jobs-single-line
        name: jobs.single.ds
        begin: (\[\s*jobs\s*\])\s*(=)\s*\{
        beginCaptures:
          '1': {name: storage.modifier.jobs.header.ds}
        end: \}
        endCaptures:
          '1': {name: punctuation.brace.end.ds}
        patterns:          
        - name: punctuation.separator.array.ds
          match: ";"
        - name: invalid.illegal.expected-array-separator.json
          match: '[^\s\}]'

  buttons:
    patterns:
      - comment: buttons-multi-line
        name: buttons.multi.ds
        begin: '({{buttonHeader}})\s*(=)\s*(\{)(?=[^\}]*$)'
        beginCaptures:
          '1': {name: storage.modifier.buttons.header.ds}
        end: (^\s*\})
        endCaptures:
          '1': {name: punctuation.brace.end.ds}
        patterns:
        - include: '#comments'
        - include: '#segment'
      - comment: buttons-single-line
        name: buttons.single.ds
        begin:  '({{buttonHeader}})\s*(=)\s*\{'
        beginCaptures:
          '1': {name: storage.modifier.buttons.header.ds}
        end: \}
        endCaptures:
          '1': {name: punctuation.brace.end.ds}
        patterns:          
        - name: punctuation.separator.array.ds
          match: ";"
        - name: invalid.illegal.expected-array-separator.json
          match: '[^\s\}]'

  lamps:
    patterns:
      - comment: lamps-multi-line
        name: lamps.multi.ds
        begin: '({{lampHeader}})\s*(=)\s*(\{)(?=[^\}]*$)'
        beginCaptures:
          '1': {name: storage.modifier.lamps.header.ds}
        end: (^\s*\})
        endCaptures:
          '1': {name: punctuation.brace.end.ds}
        patterns:
        - include: '#comments'

      - comment: lamps-single-line
        name: lamps.single.ds
        begin:  '({{lampHeader}})\s*(=)\s*\{'
        beginCaptures:
          '1': {name: storage.modifier.lamps.header.ds}
        end: \}
        endCaptures:
          '1': {name: punctuation.brace.end.ds}
        patterns:          
        - name: punctuation.separator.array.ds
          match: ";"
        - name: invalid.illegal.expected-array-separator.json
          match: '[^\s\}]'

  interfaces:
    patterns:
      - comment: interfaces-multi-line
        name: interfaces.multi.ds
        begin: (\[\s*interfaces\s*\])\s*(=)\s*(\{)(?=[^\}]*$)
        beginCaptures:
          '1': {name: storage.modifier.interfaces.header.ds}
        end: (^\s*\})
        endCaptures:
          '1': {name: punctuation.brace.end.ds}
        patterns:
        - include: '#comments'
        - include: '#parents'

      - comment: interfaces-single-line
        name: interfaces.single.ds
        begin: (\[\s*interfaces\s*\])\s*(=)\s*\{
        beginCaptures:
          '1': {name: storage.modifier.interfaces.header.ds}
        end: \}
        endCaptures:
          '1': {name: punctuation.brace.end.ds}
        patterns:          
        - name: punctuation.separator.array.ds
          match: ";"
        - name: invalid.illegal.expected-array-separator.json
          match: '[^\s\}]'

  
  codeblocks:
    patterns:
      - comment: codeblocks-multi-line
        name: codeblocks.multi.ds
        begin: (<@\{)(?=[^\}@>]*)
        beginCaptures:
          '1': {name: punctuation.codeblocks.brace.start.ds}
        end: (^\s*\}@>)
        endCaptures:
          '1': {name: punctuation.codeblocks.brace.end.ds}
        patterns:
        - include: '#comments'
        - include: '#punctuation'
        - include: '#code'
      - comment: codeblocks-single-line
        name: codeblocks.single.ds
        begin: (<@\{)
        beginCaptures:
          '1': {name: punctuation.codeblocks.brace.start.ds}
        end: (\}@>)
        endCaptures:
          '1': {name: punctuation.brace.end.ds} 
        patterns:          
        - name: punctuation.separator.array.ds
          match: ";"
        - name: invalid.illegal.expected-array-separator.json
          match: '[^\s*\}@>]'

  devices:
    patterns:
      name: storage.modifier.devices.header.ds
      # match: '{{deviceHeader}}'
      match: '(?<=\[)(device)'
      # captures:
      #   '1': {name: storage.modifier.devices.header1.ds}
      #   '2': {name: support.type.devices.header2.ds}
      #   '3': {name: storage.modifier.devices.header3.ds}

  exsystem:
    patterns:
      name: exsystem.ds

  causals:
    patterns:
      - name: punctuation.andmark.ds
        match: ','
      - name: punctuation.ormark.ds
        match: '\?'
      - name: invalid.illegal.expected-array-separator.json
        match: '(<\|>)'   
      - name: keyword.other.causal.ds
        match: '(<\|\|>)|(<\|)|(\|>)|<|>|(=>)|(<=)'

  segment:
    patterns:
    - name: 'variable.other.segment.withdot.ds'
      match: '{{identifiers}}'
    - name: 'variable.other.segment.ds'
      match: '{{identifier1}}'
    - include: '#comments'
    - name: punctuation.separator.array.ds
      match: ";"
  
  code: 
    patterns:
    - name: 'variable.other.code.ds'
      match: '(?<=\$){{identifiers}}'
    - name: 'punctuation.dollar.ds'
      match: '(?={{identifiers}})\$'
...
