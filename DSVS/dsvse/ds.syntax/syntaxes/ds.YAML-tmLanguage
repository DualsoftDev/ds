---

name: ds
comment: DS language syntax.  Do *NOT* modify auto-generated JSON file.
scopeName: source.ds
fileTypes: [ds]
foldingStartMarker: '\{\s*$'
foldingStopMarker: '^\s*\}'

# foldingStartMarker: '^\s*[{\[\`](?!.*[}\]\`],?\s*$)|[{\[\`]\s*$'
# foldingStopMarker: '^\s*[}\]\`]'

# 원본 참조
# https://github.com/inkle/ink-tmlanguage/blob/master/grammars/Ink.YAML-tmLanguage



patterns:
- include: '#comments'
- include: '#systems'
- include: '#tasks'
- include: '#flows'
- include: '#macros'

repository:
  comments: # Inline (//) and block (/* */) comments. Comments can happen anywhere.
    patterns:
    - name: comment.block.ds
      begin: (/\*)
      beginCaptures:
        '1': { name: 'punctuation.definition.comment.ds' }
      end: (\*/)
      endCaptures:
        '1': { name: 'punctuation.definition.comment.ds' }
    - name: comment.line.ds
      begin: (\/\/)
      beginCaptures:
        '1': { name: 'punctuation.definition.comment.ds' }
      end: (?=$)

  systems:
    patterns:
      - comment: multi-line
        name: system.multi.ds
        begin: \[\s*(sys)\s*\]\s*([가-힣a-zA-Z_][가-힣a-zA-Z_0-9]*)\s*=\s*(\{)(?=[^\}]*$)
        beginCaptures:
          '1': {name: keyword.other.ds}
          '2': {name: keyword.control.ds}
        end: (\})
        endCaptures:
          '1': {name: punctuation.brace.end.ds}
        patterns:          
        - include: '#comments'
        - include: '#accessDefs'
        - include: '#macros'
        - include: '#causals'
        - include: '#imports'
        - include: '#tasks'
        - include: '#flows'                
      - comment: single-line
        name: system.single.ds
        begin: \[\s*(sys)\s*\]\s*([가-힣a-zA-Z_][가-힣a-zA-Z_0-9]*)\s*=\s*\{
        beginCaptures:
          '1': {name: keyword.other.ds}
          '2': {name: keyword.control.ds}
        end: \}
        patterns:          
        - name: punctuation.separator.array.ds
          match: ";"
        - include: '#segment'
        - name: invalid.illegal.expected-array-separator.json
          match: '[^\s\}]'

  tasks:
    patterns:
      - comment: multi-line tasks
        name: tasks.multi.ds
        begin: \[\s*(task)\s*\]\s*([가-힣a-zA-Z_][가-힣a-zA-Z_0-9]*)\s*=\s*(\{)(?=[^\}]*$)
        beginCaptures:
          '1': {name: keyword.other.ds}
          '2': {name: keyword.control.ds}
        end: (\})
        endCaptures:
          '1': {name: punctuation.brace.end.ds}
        patterns:          
        - include: '#comments'
        - include: '#accessDefs'
        - include: '#callSegmentDefs'
        - include: '#macros'    
        - include: '#causals'
        - include: '#imports'
        - include: '#segment'
      - comment: single-line tasks
        name: tasks.single.ds
        begin: \[\s*(task)\s*\]\s*([가-힣a-zA-Z_][가-힣a-zA-Z_0-9]*)\s*=\s*\{
        beginCaptures:
          '1': {name: keyword.other.ds}
          '2': {name: keyword.control.ds}
        end: \}
        patterns:          
        - name: punctuation.separator.array.ds
          match: ";"
        - include: '#segment'
        - name: invalid.illegal.expected-array-separator.json
          match: '[^\s\}]'

  flows:
    patterns:
      - comment: multi-line flows
        name: flows.multi.ds
        begin: \[\s*(flow)\s*\]\s*([가-힣a-zA-Z_][가-힣a-zA-Z_0-9]*)\s*=\s*(\{)(?=[^\}]*$)
        beginCaptures:
          '1': {name: keyword.other.ds}
          '2': {name: keyword.control.ds}
        end: (\})
        endCaptures:
          '1': {name: punctuation.brace.end.ds}
        patterns:          
        - include: '#comments'
        - include: '#accessDefs'
        - include: '#macros'
        - include: '#causals'
        - include: '#imports'
      - comment: single-line flows
        name: flows.single.ds
        begin: \[\s*(flow)\s*\]\s*([가-힣a-zA-Z_][가-힣a-zA-Z_0-9]*)\s*=\s*\{
        beginCaptures:
          '1': {name: keyword.other.ds}
          '2': {name: keyword.control.ds}
        end: \}
        patterns:          
        - name: punctuation.separator.array.ds
          match: ";"
        - include: '#segment'
        - include: '#causals'
        - name: invalid.illegal.expected-array-separator.json
          match: '[^\s\}]'




  address:
    patterns:
      - comment: multi-line address
        name: address.multi.ds
        begin: \[\s*(address)\s*\]\s*=\s*(\{)(?=[^\}]*$)
        beginCaptures:
          '1': {name: keyword.other.ds}
          '2': {name: keyword.control.ds}
        end: (\})
        endCaptures:
          '1': {name: punctuation.brace.end.ds}
        patterns:          
        - include: '#comments'
        - include: '#accessDefs'
        - include: '#callSegmentDefs'
        - include: '#macros'    
        - include: '#causals'
        - include: '#imports'
      - comment: single-line address
        name: address.single.ds
        begin: \[\s*(address)\s*\]\s*=\s*\{
        beginCaptures:
          '1': {name: keyword.other.ds}
          '2': {name: keyword.control.ds}
        end: \}
        patterns:          
        - name: punctuation.separator.array.ds
          match: ";"
        - include: '#segment'
        - include: '#causals'
        - name: invalid.illegal.expected-array-separator.json
          match: '[^\s\}]'



  layouts:
    patterns:
      - comment: multi-line layouts
        name: layouts.multi.ds
        begin: \[\s*(layouts)\s*\]\s*=\s*(\{)(?=[^\}]*$)
        beginCaptures:
          '1': {name: keyword.other.ds}
          '2': {name: keyword.control.ds}
        end: (\})
        endCaptures:
          '1': {name: punctuation.brace.end.ds}
        patterns:          
        - include: '#comments'
        - include: '#accessDefs'
        - include: '#callSegmentDefs'
        - include: '#macros'    
        - include: '#causals'
        - include: '#imports'
      - comment: single-line layouts
        name: layouts.single.ds
        begin: \[\s*(layouts)\s*\]\s*=\s*\{
        beginCaptures:
          '1': {name: keyword.other.ds}
          '2': {name: keyword.control.ds}
        end: \}
        patterns:          
        - name: punctuation.separator.array.ds
          match: ";"
        - include: '#segment'
        - name: invalid.illegal.expected-array-separator.json
          match: '[^\s\}]'

  accessDefs:
    patterns:
    - name: access.ds
      begin: \[\s*(accsre|accsr|accre|accse|accs|accr|acce)\s*\]\s*=\s*(\{)
      beginCaptures:
        '1': {name: keyword.other.accessSRE.ds}      
      end: (\})
      patterns:
        - name: punctuation.brace.separator.ds
          match: ;
        - include: '#segment'
        - include: '#comments'
    - include: '#comments'
    - include: $self

#  macros:
#    patterns:
#    - name: macro2.ds
#      begin: (\@|\#)\s*([가-힣a-zA-Z][가-힣a-zA-Z_0-9]*)*\s*\(\s*[가-힣a-zA-Z_0-9]*\s*\)
#      patterns:
#        - include: '#callSegmentDefs'
#        - include: '#causals'
#        - include: '#comments'

  callSegmentDefs:
    patterns:
    - name: call.segment.ds
      begin: ([가-힣a-zA-Z_][가-힣a-zA-Z_0-9]*)\s*=\s*(\{)
      beginCaptures:
        '1': {name: keyword.control.callSegment.ds}
      end: (\})
    - name: call.segment.with.dot.ds
      begin: (.[가-힣a-zA-Z_][가-힣a-zA-Z_0-9]*)\s*=\s*(\{)
      beginCaptures:
        '1': {name: keyword.control.callSegment.ds}
      end: (\})
      patterns:
        - name: punctuation.comma.ds
          match: ','
        - name: keyword.other.callSegment.ds
          match: '~'
        - include: '#segment'
        - name: invalid.illegal.expected-array-separator.json
          match: '[;<>\|]'

  causals:
    patterns:
      - name: punctuation.andmark.ds
        match: ','
      - name: punctuation.ormark.ds
        match: '\?'
      - include: '#segment'
      - name: invalid.illegal.expected-array-separator.json
        match: '(<\|>)'   
      - name: keyword.other.causal.ds
        match: '(<\|\|>)|(<\|)|(\|>)|<|>'

  imports:
    patterns:
    - name: import.ds
      begin: \s*(!#import)\s*([가-힣a-zA-Z_][가-힣a-zA-Z_0-9]*) (as) ([가-힣a-zA-Z_][가-힣a-zA-Z_0-9]*) (from) (\"[^\"]+\")
      beginCaptures:
        '1': {name: keyword.other.import.ds}
        '2': {name: variable.other}
        '3': {name: keyword.other.import.ds}
        '4': {name: variable.other}
        '5': {name: keyword.other.import.ds}
        '6': {name: string.quoted.double.ds}
      end: ';'

    - name: import.ds
      begin: \s*(!#import)\s*\{
      beginCaptures:
        '1': {name: keyword.other.import.ds}
      end: \}\s*(from)\s*(\"[^\"]+\")\s*;
      endCaptures:
        '1': {name: keyword.other.import.ds}
        '2': {name: string.quoted.double.ds}
      patterns:
      - name: keyword.other.as.ds
        match: 'as'
      - name: punctuation.comma.ds
        match: ','
      - include: '#segment'
      - include: '#comments'


  macros:
    patterns:
    - name: access.ds
      begin: (#|@)\s*([가-힣a-zA-Z_][가-힣a-zA-Z_0-9]*)*\s*(\()
      beginCaptures:
        '1': {name: keyword.other.accessMacro.ds}      
      end: (\))
      patterns:
        - name: punctuation.brace.separator.ds
          match: ;
        - name: 'variable.other.words.ds'
          match: '\b[가-힣a-zA-Z_0-9]*\b'
        - include: '#segment'
        - include: '#comments'
    - include: '#comments'
    - include: $self

  segment:
    patterns:
    - name: 'variable.other.segment.withdot.ds'
      match: '\b[가-힣a-zA-Z_][가-힣a-zA-Z_0-9]*\.[가-힣a-zA-Z_][가-힣a-zA-Z_0-9]*\b'
    - name: 'variable.other.segment.ds'
      match: '\b[가-힣a-zA-Z_][가-힣a-zA-Z_0-9]*\b'
    - include: '#comments'
    - name: invalid.illegal.expected-array-separator.json
      match: '[^\s\{\};=<>\|&~\(\)]'


  segments:
    - name: meta.structure.array.ds
      begin: (\{)
      beginCaptures:
        '1': { name: 'punctuation.definition.macro.start.ds' }
      end: (\})
      endCaptures:
        '1': { name: 'punctuation.definition.macro.end.ds' } 
      patterns:
      - name: punctuation.separator.array.ds
        match: ";"
      - name: invalid.illegal.expected-array-separator.json
        match: '[^\s\]]'
      - include: '#comments'
      - include: '#segment'
      - include: '#macros'





...
